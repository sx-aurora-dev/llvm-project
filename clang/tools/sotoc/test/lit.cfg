# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.
import os
import lit.formats

def append_dynamic_library_path(path1, path2):
    if config.operating_system == 'Windows':
        name = 'PATH'
        sep = ';'
    elif config.operating_system == 'Darwin':
        name = 'DYLD_LIBRARY_PATH'
        sep = ':'
    else:
        name = 'LD_LIBRARY_PATH'
        sep = ':'
        config.environment['LIBRARY_PATH'] = path1 + sep + path2
    if name in config.environment:
        # We must not keep the old environment, because this leads
        # to seq faults in some configurations. This is why we overwrite
        # the path instead of appending.
        #config.environment[name] = path + sep + config.environment[name]
        config.environment[name] = path1 + sep + path2
    else:
        config.environment[name] = path

# our test suite's name
config.name = 'sotoc'

# files to treat as test cases
config.suffixes = ['.c']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)
config.singleProcess = True

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.sotoc_obj_root

# test format
config.test_format = lit.formats.ShTest()

config.test_flags = '-I ' + config.test_source_root + ' ' + \
                    '-I ' + config.omp_header_directory + ' ' + \
                    '-fopenmp ' + \
                    '-Werror=implicit-function-declaration ' #+ \
                    #'-Xopenmp-target \"-Xlinker -fopenmp-static\" '


# Setup environment to find dynamic library at runtime
append_dynamic_library_path(config.library_dir, config.ompt_library_dir)

# Add CPATH
if 'CPATH' in config.environment:
    config.environment['CPATH'] = config.omp_header_directory + ':' + config.environment['CPATH']
else:
    config.environment['CPATH'] = config.omp_header_directory

# Use the 8th card for testing by default so we don't collide with manually
# executed programs, which usually use device 1
config.environment['OMP_DEFAULT_DEVICE'] = os.environ.get('OMP_DEFAULT_DEVICE',
                                                          '7')

# substitutions
config.substitutions.append(('%sotoc-filecheck-transformed', \
    '%filecheck -input-file=%t.transformed.c %s'))
config.substitutions.append(('%run-on-host', \
    '%compile-for-target && %t.o'))
config.substitutions.append(('%sotoc-transform-compile', \
    '%sotoc-transform && %sotoc-check-empty && %sotoc-compile'))
config.substitutions.append(('%sotoc-transform', \
    '%sotoc %s -- -fopenmp %cflags > %t.transformed.c'))
config.substitutions.append(('%sotoc-prepare-compilable', \
    'echo -e "#include \\\"main.h\\\"" > %t.transformed.c'))
# avoid to compile a empty file produced by sotoc
config.substitutions.append(('%sotoc-check-empty', \
    'test -s %t.transformed.c'))
config.substitutions.append(('%sotoc-compile', \
    '%compiler %cflags %t.transformed.c -c -o %t.o'))
config.substitutions.append(('%compile-for-target', \
    '%compiler -Xopenmp-target "--sotoc-path=%sotoc" \
    -fopenmp -fopenmp-nec-compiler=ncc -fopenmp-targets=aurora-nec-veort-unknown %s -o %t.o'))
config.substitutions.append(('%sotoc-library-compile',
    '%compiler -Xopenmp-target "--sotoc-path=%sotoc" -fopenmp \
     -fopenmp-targets=aurora-nec-veort-unknown -DIS_LIBRARY -shared \
     -fPIC %s -o %t.lib.so'))
config.substitutions.append(('%sotoc-static-compile', \
    '%compiler -Xopenmp-target "--sotoc-path=%sotoc" \
    -fopenmp -fopenmp-targets=aurora-nec-veort-unknown \
    -Xopenmp-target "-Xlinker -fopenmp-static" %s -o %t.o'))

config.substitutions.append(('%compiler', config.test_compiler))
config.substitutions.append(('%cflags', config.test_flags))
config.substitutions.append(('%sotoc', config.test_sotoc))
config.substitutions.append(('%filecheck', config.filecheck))
