//===-- VVPNodes.def - Lists & properties of VE Vector Predication Nodes --===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines all VVP_* SDNodes and their properties
//
//===----------------------------------------------------------------------===//

/// HANDLE_VP_TO_VVP(VPOPC, VVPOPC)
/// \p  VPOPC is the VP_* SDNode opcode.
/// \p  VVPOPC is the VVP_* SDNode opcode.
#ifndef HANDLE_VP_TO_VVP
#define HANDLE_VP_TO_VVP(VPOPC, VVPOPC)
#endif

// Register a new VVP Opcode.
#ifndef REGISTER_VVP_OP
#define REGISTER_VVP_OP(X)
#endif

// Map VVP Opcode to Standard ISD.
#ifndef MAP_VVP_OP
#define MAP_VVP_OP(X,Y)
#endif

#ifndef REGISTER_TERNARY_VVP_OP
#define REGISTER_TERNARY_VVP_OP(X)  REGISTER_VVP_OP(X)
#endif

#ifndef REGISTER_BINARY_VVP_OP
#define REGISTER_BINARY_VVP_OP(X)  REGISTER_VVP_OP(X)
#endif

#ifndef REGISTER_UNARY_VVP_OP
#define REGISTER_UNARY_VVP_OP(X)  REGISTER_VVP_OP(X)
#endif

// Conversion to an fp type.
#ifndef REGISTER_FPCONV_VVP_OP
#define REGISTER_FPCONV_VVP_OP(X) REGISTER_VVP_OP(X)
#endif

// Conversion to an integer type.
#ifndef REGISTER_ICONV_VVP_OP
#define REGISTER_ICONV_VVP_OP(X) REGISTER_VVP_OP(X)
#endif

#ifndef REGISTER_REDUCE_VVP_OP
#define REGISTER_REDUCE_VVP_OP(X) REGISTER_VVP_OP(X)
#endif

// This VVP op supports packed mode.
#ifndef REGISTER_PACKED
#define REGISTER_PACKED(VVP_NAME)
#endif

// Scalar standard ISD to perform this reduction.
#ifndef HANDLE_VVP_REDUCE_TO_SCALAR
#define HANDLE_VVP_REDUCE_TO_SCALAR(VVP_RED_ISD, REDUCE_ISD)
#endif

/// ADD_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP SDNode operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_VVP_OP
#define ADD_VVP_OP(X, Y) \
REGISTER_VVP_OP(X) \
MAP_VVP_OP(X, Y)
#endif

#ifndef ADD_TERNARY_VVP_OP
#define ADD_TERNARY_VVP_OP(X,Y) \
REGISTER_TERNARY_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

/// ADD_BINARY_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP Binary operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_BINARY_VVP_OP
#define ADD_BINARY_VVP_OP(X,Y) \
REGISTER_BINARY_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

#ifndef ADD_UNARY_VVP_OP
#define ADD_UNARY_VVP_OP(X,Y) \
REGISTER_UNARY_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

#ifndef ADD_FPCONV_VVP_OP
#define ADD_FPCONV_VVP_OP(X,Y) \
REGISTER_FPCONV_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

#ifndef ADD_ICONV_VVP_OP
#define ADD_ICONV_VVP_OP(X,Y) \
REGISTER_ICONV_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

#ifndef ADD_REDUCE_VVP_OP
#define ADD_REDUCE_VVP_OP(X,Y) \
REGISTER_REDUCE_VVP_OP(X) \
MAP_VVP_OP(X,Y)
#endif

// non-standard SIMD operators
ADD_VVP_OP(VVP_GATHER, MGATHER)     HANDLE_VP_TO_VVP(VP_GATHER, VVP_GATHER)
ADD_VVP_OP(VVP_SCATTER, MSCATTER)   HANDLE_VP_TO_VVP(VP_SCATTER, VVP_SCATTER)

ADD_VVP_OP(VVP_LOAD,LOAD)   HANDLE_VP_TO_VVP(VP_LOAD, VVP_LOAD)   REGISTER_PACKED(VVP_LOAD)
ADD_VVP_OP(VVP_STORE,STORE) HANDLE_VP_TO_VVP(VP_STORE, VVP_STORE) REGISTER_PACKED(VVP_STORE)

// standard SIMD operators
// int arith
ADD_BINARY_VVP_OP(VVP_ADD,ADD) HANDLE_VP_TO_VVP(VP_ADD, VVP_ADD) REGISTER_PACKED(VVP_ADD)
ADD_BINARY_VVP_OP(VVP_MUL,MUL) HANDLE_VP_TO_VVP(VP_MUL, VVP_MUL) 
ADD_BINARY_VVP_OP(VVP_SUB,SUB) HANDLE_VP_TO_VVP(VP_SUB, VVP_SUB) REGISTER_PACKED(VVP_SUB)
ADD_BINARY_VVP_OP(VVP_UDIV,UDIV) HANDLE_VP_TO_VVP(VP_UDIV, VVP_UDIV) 
ADD_BINARY_VVP_OP(VVP_SDIV,SDIV) HANDLE_VP_TO_VVP(VP_SDIV, VVP_SDIV) 
ADD_BINARY_VVP_OP(VVP_UREM,UREM) HANDLE_VP_TO_VVP(VP_UREM, VVP_UREM) 
ADD_BINARY_VVP_OP(VVP_SREM,SREM) HANDLE_VP_TO_VVP(VP_SREM, VVP_SREM) 

ADD_BINARY_VVP_OP(VVP_AND,AND) HANDLE_VP_TO_VVP(VP_AND, VVP_AND) REGISTER_PACKED(VVP_AND)
ADD_BINARY_VVP_OP(VVP_OR,OR)   HANDLE_VP_TO_VVP(VP_OR, VVP_OR)   REGISTER_PACKED(VVP_OR)
ADD_BINARY_VVP_OP(VVP_XOR,XOR) HANDLE_VP_TO_VVP(VP_XOR, VVP_XOR) REGISTER_PACKED(VVP_XOR)

ADD_BINARY_VVP_OP(VVP_SRL,SRL) HANDLE_VP_TO_VVP(VP_LSHR, VVP_SRL) REGISTER_PACKED(VVP_SRL)
ADD_BINARY_VVP_OP(VVP_SRA,SRA) HANDLE_VP_TO_VVP(VP_ASHR, VVP_SRA) REGISTER_PACKED(VVP_SRA)
ADD_BINARY_VVP_OP(VVP_SHL,SHL) HANDLE_VP_TO_VVP(VP_SHL, VVP_SHL) REGISTER_PACKED(VVP_SHL)

// Fused ops
// x = y + (z << s)
REGISTER_TERNARY_VVP_OP(VVP_SFA)

// fp arith
ADD_UNARY_VVP_OP(VVP_FNEG, FNEG) HANDLE_VP_TO_VVP(VP_FNEG, VVP_FNEG) REGISTER_PACKED(VVP_FNEG)
ADD_BINARY_VVP_OP(VVP_FADD,FADD) HANDLE_VP_TO_VVP(VP_FADD, VVP_FADD) REGISTER_PACKED(VVP_FADD)
ADD_BINARY_VVP_OP(VVP_FMUL,FMUL) HANDLE_VP_TO_VVP(VP_FMUL, VVP_FMUL) REGISTER_PACKED(VVP_FMUL)
ADD_BINARY_VVP_OP(VVP_FSUB,FSUB) HANDLE_VP_TO_VVP(VP_FSUB, VVP_FSUB) REGISTER_PACKED(VVP_FSUB)
ADD_BINARY_VVP_OP(VVP_FDIV,FDIV) HANDLE_VP_TO_VVP(VP_FDIV, VVP_FDIV)

ADD_BINARY_VVP_OP(VVP_FMINNUM,FMINNUM) HANDLE_VP_TO_VVP(VP_FMINNUM, VVP_FMINNUM)
ADD_BINARY_VVP_OP(VVP_FMAXNUM,FMAXNUM) HANDLE_VP_TO_VVP(VP_FMAXNUM, VVP_FMAXNUM)

// Z*W + Y
ADD_TERNARY_VVP_OP(VVP_FFMA,FMA) HANDLE_VP_TO_VVP(VP_FMA, VVP_FFMA) REGISTER_PACKED(VVP_FFMA)

// Z*W - Y
REGISTER_TERNARY_VVP_OP(VVP_FFMS) REGISTER_PACKED(VVP_FFMS)
// Y - Z*W
REGISTER_TERNARY_VVP_OP(VVP_FFMSN) REGISTER_PACKED(VVP_FFMSN)

// Select
ADD_TERNARY_VVP_OP(VVP_SELECT,VSELECT)  REGISTER_PACKED(VVP_SELECT)

// Shuffles.
HANDLE_VP_TO_VVP(VP_SELECT, VVP_SELECT)
HANDLE_VP_TO_VVP(VP_MERGE, VVP_SELECT)

ADD_TERNARY_VVP_OP(VVP_SETCC,SETCC) HANDLE_VP_TO_VVP(VP_SETCC, VVP_SETCC) 

// sint <> fp
ADD_FPCONV_VVP_OP(VVP_SINT_TO_FP,SINT_TO_FP) HANDLE_VP_TO_VVP(VP_SINT_TO_FP,VVP_SINT_TO_FP) REGISTER_PACKED(VVP_SINT_TO_FP)
// ADD_VVP_OP(VVP_UINT_TO_FP) ADD_FPCONV_VVP_OP(VVP_UINT_TO_FP,UINT_TO_FP)// HANDLE_VP_TO_VVP(VP_UINT_TO_FP,VVP_UINT_TO_FP) // not supported on VE
ADD_FPCONV_VVP_OP(VVP_FP_TO_SINT,FP_TO_SINT) HANDLE_VP_TO_VVP(VP_FP_TO_SINT,VVP_FP_TO_SINT) REGISTER_PACKED(VVP_FP_TO_SINT)
// ADD_VVP_OP(VVP_FP_TO_UINT) ADD_FPCONV_VVP_OP(VVP_FP_TO_UINT,FP_TO_UINT)// HANDLE_VP_TO_VVP(VP_FP_TO_UINT,VVP_FP_TO_UINT) // not supported on VE

// int <> int
ADD_ICONV_VVP_OP(VVP_ITRUNC,TRUNCATE)   // HANDLE_VP_TO_VVP(VP_ITRUNC,VVP_ITRUNC)
ADD_ICONV_VVP_OP(VVP_SEXT,SIGN_EXTEND)    // HANDLE_VP_TO_VVP(VP_SEXT,VVP_SEXT)
ADD_ICONV_VVP_OP(VVP_ZEXT,ZERO_EXTEND)    // HANDLE_VP_TO_VVP(VP_ZEXT,VVP_ZEXT)

// fpround, fpext
ADD_FPCONV_VVP_OP(VVP_FPTRUNC,FP_ROUND)    HANDLE_VP_TO_VVP(VP_FP_TRUNC,VVP_FPTRUNC) // actual fp type truncation.
ADD_FPCONV_VVP_OP(VVP_FPEXT,FP_EXTEND)    HANDLE_VP_TO_VVP(VP_FP_EXTEND,VVP_FPEXT)
// ADD_FPCONV_VVP_OP(VVP_FPROUND,FROUND)   HANDLE_VP_TO_VVP(VP_FROUND,VVP_FPROUND) // FIXME vector expansion n/a

// element-wise bitops
ADD_UNARY_VVP_OP(VVP_CTPOP,CTPOP)   // HANDLE_VP_TO_VVP(VP_FROUND,VVP_FPROUND) // TODO as VP -opt


#if 0
// Disabled, this gets expanded instead
ADD_UNARY_VVP_OP(VVP_FFLOOR, FFLOOR)      HANDLE_VP_TO_VVP(VP_FFLOOR, VVP_FFLOOR)
#endif

// fp math
REGISTER_UNARY_VVP_OP(VVP_FRCP)            REGISTER_PACKED(VVP_FRCP)
ADD_UNARY_VVP_OP(VVP_FSQRT, FSQRT)         HANDLE_VP_TO_VVP(VP_FSQRT, VVP_FSQRT)
REGISTER_UNARY_VVP_OP(VVP_FRSQRT)          REGISTER_PACKED(VVP_FRSQRT)

// fp reductions (with strict)
#define HELPER_REDUCTION_NOVP(OP, SCALAR_OP) \
ADD_REDUCE_VVP_OP(VVP_REDUCE_##OP,VECREDUCE_##OP) HANDLE_VVP_REDUCE_TO_SCALAR(VVP_REDUCE_##OP, SCALAR_OP)

#define HELPER_REDUCTION_WITH_SEQ(OP, SCALAR_OP) \
HELPER_REDUCTION_NOVP(OP, SCALAR_OP)  HANDLE_VP_TO_VVP(VP_REDUCE_##OP, VVP_REDUCE_##OP)

#define HELPER_REDUCTION(OP) \
HELPER_REDUCTION_WITH_SEQ(OP, OP)

#define HELPER_EXPAND_FPREDUCTIONS(OP) \
HELPER_REDUCTION_WITH_SEQ(OP, OP) \
HELPER_REDUCTION_WITH_SEQ(SEQ_##OP, OP)

HELPER_EXPAND_FPREDUCTIONS(FADD)
HELPER_EXPAND_FPREDUCTIONS(FMUL)

#undef HELPER_EXPAND_FPREDUCTIONS

// int reductions and non-strict fp reductions
HELPER_REDUCTION(ADD)
HELPER_REDUCTION(MUL)
HELPER_REDUCTION(AND)
HELPER_REDUCTION(OR)
HELPER_REDUCTION(XOR)
HELPER_REDUCTION(SMIN)
HELPER_REDUCTION(SMAX)
HELPER_REDUCTION(UMIN)
HELPER_REDUCTION(UMAX)
HELPER_REDUCTION_WITH_SEQ(FMIN,FMINNUM)
HELPER_REDUCTION_WITH_SEQ(FMAX,FMAXNUM)

#undef HELPER_REDUCTION
#undef HELPER_REDUCTION_WITH_SEQ
#undef HELPER_REDUCTION_NOVP

#undef REGISTER_VVP_OP
#undef ADD_VVP_OP
#undef MAP_VVP_OP
#undef HANDLE_VP_TO_VVP

#undef ADD_TERNARY_VVP_OP
#undef ADD_BINARY_VVP_OP
#undef ADD_UNARY_VVP_OP
#undef ADD_FPCONV_VVP_OP
#undef ADD_ICONV_VVP_OP
#undef ADD_REDUCE_VVP_OP

#undef REGISTER_TERNARY_VVP_OP
#undef REGISTER_BINARY_VVP_OP
#undef REGISTER_UNARY_VVP_OP
#undef REGISTER_FPCONV_VVP_OP
#undef REGISTER_ICONV_VVP_OP
#undef REGISTER_REDUCE_VVP_OP

#undef REGISTER_PACKED
#undef HANDLE_VVP_REDUCE_TO_SCALAR
