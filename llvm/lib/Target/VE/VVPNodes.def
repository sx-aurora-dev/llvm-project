//===-- VVPNodes.def - Lists & properties of VE Vector Predication Nodes --===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines all VVP_* SDNodes and their properties
//
//===----------------------------------------------------------------------===//

/// HANDLE_VP_TO_VVP(VPOPC, VVPOPC)
/// \p  VPOPC is the VP_* SDNode opcode.
/// \p  VVPOPC is the VVP_* SDNode opcode.
#ifndef HANDLE_VP_TO_VVP
#define HANDLE_VP_TO_VVP(VPOPC, VVPOPC)
#endif

/// ADD_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP SDNode operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_VVP_OP
#define ADD_VVP_OP(X, Y)
#endif

/// ADD_UNARY_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP Unary operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_UNARY_VVP_OP
#define ADD_UNARY_VVP_OP(VVPNAME,SDNAME) \
            ADD_VVP_OP(VVPNAME,SDNAME)
#endif

/// ADD_BINARY_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP Binary operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_BINARY_VVP_OP
#define ADD_BINARY_VVP_OP(VVPNAME,VPNAME,SDNAME) \
            ADD_VVP_OP(VVPNAME,SDNAME) \
            HANDLE_VP_TO_VVP(VPNAME, VVPNAME)
#endif

/// ADD_TERNARY_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP Ternary operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_TERNARY_VVP_OP
#define ADD_TERNARY_VVP_OP(VVPNAME,SDNAME) \
    ADD_VVP_OP(VVPNAME,SDNAME)
#endif

#ifndef ADD_BINARY_VVP_OP_COMPACT
#define ADD_BINARY_VVP_OP_COMPACT(NAME) \
    ADD_BINARY_VVP_OP(VVP_##NAME,VP_##NAME,NAME)
#endif

/// ADD_FPCONV_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP floating-point conversion operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_FPCONV_VVP_OP
#define ADD_FPCONV_VVP_OP(X,Y) ADD_VVP_OP(X,Y)
#endif

/// ADD_ICONV_VVP_OP(VVPNAME,SDNAME)
/// \p VVPName is a VVP integer conversion operator.
/// \p SDNAME is the generic SD opcode corresponding to \p VVPName.
#ifndef ADD_ICONV_VVP_OP
#define ADD_ICONV_VVP_OP(X,Y) ADD_VVP_OP(X,Y)
#endif

/// REGISTER_PACKED(OPC)
/// \p OPC The VVP opcode of the operation.
#ifndef REGISTER_PACKED
#define REGISTER_PACKED(OPC)
#endif

/// ADD_REDUCE_VVP_OP(OPC)
/// \p OPC The VVP opcode of the operation.
/// \p SDNAME The standard opcode of the operation.
#ifndef ADD_REDUCE_VVP_OP
#define ADD_REDUCE_VVP_OP(OPC, SDNAME) ADD_VVP_OP(OPC, SDNAME)
#endif

// Scalar standard ISD to perform this reduction.
#ifndef HANDLE_VVP_REDUCE_TO_SCALAR
#define HANDLE_VVP_REDUCE_TO_SCALAR(VVP_RED_ISD, REDUCE_ISD)
#endif

/// Reductions.
#define HELPER_REDUCTION_NOVP(OP, SCALAR_OP) \
ADD_REDUCE_VVP_OP(VVP_REDUCE_##OP,VECREDUCE_##OP) HANDLE_VVP_REDUCE_TO_SCALAR(VVP_REDUCE_##OP, SCALAR_OP)

#define HELPER_REDUCTION(OP, SCALAR_OP) \
HELPER_REDUCTION_NOVP(OP, SCALAR_OP)  HANDLE_VP_TO_VVP(VP_REDUCE_##OP, VVP_REDUCE_##OP)

#define HELPER_EXPAND_FPREDUCTIONS(OP) \
HELPER_REDUCTION(OP, OP) \
HELPER_REDUCTION(SEQ_##OP, OP)

HELPER_EXPAND_FPREDUCTIONS(FADD)
HELPER_EXPAND_FPREDUCTIONS(FMUL)

#undef HELPER_EXPAND_FPREDUCTIONS

// int reductions and non-strict fp reductions
HELPER_REDUCTION(ADD, ADD)
HELPER_REDUCTION(AND, AND)
HELPER_REDUCTION(OR, OR)
HELPER_REDUCTION(XOR, XOR)
HELPER_REDUCTION(SMAX, SMAX)
HELPER_REDUCTION(MUL, MUL)
HELPER_REDUCTION(SMIN, SMIN)
HELPER_REDUCTION(UMIN, UMIN)
HELPER_REDUCTION(UMAX, UMAX)
HELPER_REDUCTION(FMIN,FMINNUM)
HELPER_REDUCTION(FMAX,FMAXNUM)

#undef HELPER_REDUCTION

ADD_VVP_OP(VVP_LOAD,LOAD)   HANDLE_VP_TO_VVP(VP_LOAD, VVP_LOAD)   REGISTER_PACKED(VVP_LOAD)
ADD_VVP_OP(VVP_STORE,STORE) HANDLE_VP_TO_VVP(VP_STORE, VVP_STORE) REGISTER_PACKED(VVP_STORE)

ADD_VVP_OP(VVP_GATHER, MGATHER)     HANDLE_VP_TO_VVP(VP_GATHER, VVP_GATHER)
ADD_VVP_OP(VVP_SCATTER, MSCATTER)   HANDLE_VP_TO_VVP(VP_SCATTER, VVP_SCATTER)

// Integer arithmetic.
ADD_UNARY_VVP_OP(VVP_CTPOP,CTPOP)

ADD_BINARY_VVP_OP_COMPACT(ADD) REGISTER_PACKED(VVP_ADD)
ADD_BINARY_VVP_OP_COMPACT(SUB) REGISTER_PACKED(VVP_SUB)
ADD_BINARY_VVP_OP_COMPACT(MUL)
ADD_BINARY_VVP_OP_COMPACT(UDIV)
ADD_BINARY_VVP_OP_COMPACT(SDIV)
ADD_BINARY_VVP_OP_COMPACT(UREM)
ADD_BINARY_VVP_OP_COMPACT(SREM)

ADD_BINARY_VVP_OP(VVP_SRA,VP_ASHR,SRA) REGISTER_PACKED(VVP_SRA)
ADD_BINARY_VVP_OP(VVP_SRL,VP_LSHR,SRL) REGISTER_PACKED(VVP_SRL)
ADD_BINARY_VVP_OP_COMPACT(SHL) REGISTER_PACKED(VVP_SHL)

ADD_BINARY_VVP_OP_COMPACT(AND) REGISTER_PACKED(VVP_AND)
ADD_BINARY_VVP_OP_COMPACT(OR)  REGISTER_PACKED(VVP_OR)
ADD_BINARY_VVP_OP_COMPACT(XOR) REGISTER_PACKED(VVP_XOR)

// FP arithmetic.
ADD_UNARY_VVP_OP(VVP_FNEG, FNEG)   HANDLE_VP_TO_VVP(VP_FNEG, VVP_FNEG) REGISTER_PACKED(VVP_FNEG)
ADD_UNARY_VVP_OP(VVP_FRCP, DELETED_NODE)         REGISTER_PACKED(VVP_FRCP)
ADD_UNARY_VVP_OP(VVP_FSQRT, FSQRT) HANDLE_VP_TO_VVP(VP_SQRT, VVP_FSQRT)
ADD_UNARY_VVP_OP(VVP_FRSQRT, DELETED_NODE)       REGISTER_PACKED(VVP_FRSQRT)

ADD_BINARY_VVP_OP_COMPACT(FADD) REGISTER_PACKED(VVP_FADD)
ADD_BINARY_VVP_OP_COMPACT(FSUB) REGISTER_PACKED(VVP_FSUB)
ADD_BINARY_VVP_OP_COMPACT(FMUL) REGISTER_PACKED(VVP_FMUL)
ADD_BINARY_VVP_OP_COMPACT(FDIV)

ADD_BINARY_VVP_OP_COMPACT(FMINNUM)
ADD_BINARY_VVP_OP_COMPACT(FMAXNUM)

ADD_TERNARY_VVP_OP(VVP_FFMA,FMA) HANDLE_VP_TO_VVP(VP_FMA, VVP_FFMA) REGISTER_PACKED(VVP_FFMA)
ADD_TERNARY_VVP_OP(VVP_FFMS,DELETED_NODE) REGISTER_PACKED(VVP_FFMS)
ADD_TERNARY_VVP_OP(VVP_FFMSN,DELETED_NODE) REGISTER_PACKED(VVP_FFMSN)

/// Conversions

ADD_FPCONV_VVP_OP(VVP_SINT_TO_FP,SINT_TO_FP) HANDLE_VP_TO_VVP(VP_SINT_TO_FP,VVP_SINT_TO_FP) REGISTER_PACKED(VVP_SINT_TO_FP)
ADD_FPCONV_VVP_OP(VVP_FP_TO_SINT,FP_TO_SINT) HANDLE_VP_TO_VVP(VP_FP_TO_SINT,VVP_FP_TO_SINT) REGISTER_PACKED(VVP_FP_TO_SINT)
// ui <> fp conversion unsupported on VE.

ADD_FPCONV_VVP_OP(VVP_FPTRUNC,FP_ROUND)   HANDLE_VP_TO_VVP(VP_FP_ROUND,VVP_FPTRUNC)
ADD_FPCONV_VVP_OP(VVP_FPEXT,FP_EXTEND)    HANDLE_VP_TO_VVP(VP_FP_EXTEND,VVP_FPEXT)

ADD_ICONV_VVP_OP(VVP_ITRUNC,TRUNCATE)
ADD_ICONV_VVP_OP(VVP_SEXT,SIGN_EXTEND)
ADD_ICONV_VVP_OP(VVP_ZEXT,ZERO_EXTEND)

// Shuffles.
ADD_VVP_OP(VVP_SELECT,VSELECT) REGISTER_PACKED(VVP_SELECT)
HANDLE_VP_TO_VVP(VP_SELECT, VVP_SELECT)
HANDLE_VP_TO_VVP(VP_MERGE, VVP_SELECT)

ADD_VVP_OP(VVP_SETCC,SETCC)  HANDLE_VP_TO_VVP(VP_SETCC, VVP_SETCC)


#undef ADD_FPCONV_VVP_OP
#undef ADD_ICONV_VVP_OP
#undef ADD_BINARY_VVP_OP
#undef ADD_TERNARY_VVP_OP
#undef ADD_UNARY_VVP_OP
#undef ADD_BINARY_VVP_OP_COMPACT
#undef ADD_REDUCE_VVP_OP
#undef ADD_VVP_OP
#undef HANDLE_VP_TO_VVP
#undef HANDLE_VVP_REDUCE_TO_SCALAR
#undef REGISTER_PACKED
