; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown | FileCheck %s

@vi8 = common dso_local local_unnamed_addr global i8 0, align 1
@vi16 = common dso_local local_unnamed_addr global i16 0, align 1
@vi32 = common dso_local local_unnamed_addr global i32 0, align 1
@vi64 = common dso_local local_unnamed_addr global i64 0, align 1
@vf32 = common dso_local local_unnamed_addr global float 0.000000e+00, align 1
@vf64 = common dso_local local_unnamed_addr global double 0.000000e+00, align 1

; Function Attrs: norecurse nounwind readonly
define double @loadf64stk() {
; CHECK-LABEL: loadf64stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    ld %s0, 8(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca double, align 1
  %1 = load double, double* %addr, align 1
  ret double %1
}

; Function Attrs: norecurse nounwind readonly
define float @loadf32stk() {
; CHECK-LABEL: loadf32stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    ldu %s0, 12(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca float, align 1
  %1 = load float, float* %addr, align 1
  ret float %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @loadi64stk() {
; CHECK-LABEL: loadi64stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    ld %s0, 8(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca i64, align 1
  %1 = load i64, i64* %addr, align 1
  ret i64 %1
}

; Function Attrs: norecurse nounwind readonly
define i32 @loadi32stk() {
; CHECK-LABEL: loadi32stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB3_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    ldl.sx %s0, 12(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca i32, align 1
  %1 = load i32, i32* %addr, align 1
  ret i32 %1
}

; Function Attrs: norecurse nounwind readonly
define i16 @loadi16stk() {
; CHECK-LABEL: loadi16stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    ld2b.zx %s0, 14(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca i16, align 1
  %1 = load i16, i16* %addr, align 1
  ret i16 %1
}

; Function Attrs: norecurse nounwind readonly
define i8 @loadi8stk() {
; CHECK-LABEL: loadi8stk:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    ld1b.zx %s0, 15(, %s11)
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %addr = alloca i8, align 1
  %1 = load i8, i8* %addr, align 1
  ret i8 %1
}

; Function Attrs: norecurse nounwind readonly
define double @loadf64com() {
; CHECK-LABEL: loadf64com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vf64@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vf64@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s1, 1(, %s0)
; CHECK-NEXT:    ld1b.zx %s2, (, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 3(, %s0)
; CHECK-NEXT:    ld1b.zx %s4, 2(, %s0)
; CHECK-NEXT:    sll %s1, %s1, 8
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    sll %s2, %s3, 8
; CHECK-NEXT:    or %s2, %s2, %s4
; CHECK-NEXT:    sll %s2, %s2, 16
; CHECK-NEXT:    or %s1, %s2, %s1
; CHECK-NEXT:    ld1b.zx %s2, 5(, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 4(, %s0)
; CHECK-NEXT:    ld1b.zx %s4, 7(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, 6(, %s0)
; CHECK-NEXT:    sll %s2, %s2, 8
; CHECK-NEXT:    or %s2, %s2, %s3
; CHECK-NEXT:    sll %s3, %s4, 8
; CHECK-NEXT:    or %s0, %s3, %s0
; CHECK-NEXT:    sll %s0, %s0, 16
; CHECK-NEXT:    or %s0, %s0, %s2
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load double, double* @vf64, align 1
  ret double %1
}

; Function Attrs: norecurse nounwind readonly
define float @loadf32com() {
; CHECK-LABEL: loadf32com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vf32@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vf32@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s1, 1(, %s0)
; CHECK-NEXT:    ld1b.zx %s2, (, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 3(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, 2(, %s0)
; CHECK-NEXT:    sla.w.sx %s1, %s1, 8
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    sla.w.sx %s2, %s3, 8
; CHECK-NEXT:    or %s0, %s2, %s0
; CHECK-NEXT:    sla.w.sx %s0, %s0, 16
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load float, float* @vf32, align 1
  ret float %1
}

; Function Attrs: norecurse nounwind readonly
define i64 @loadi64com() {
; CHECK-LABEL: loadi64com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vi64@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vi64@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s1, 1(, %s0)
; CHECK-NEXT:    ld1b.zx %s2, (, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 3(, %s0)
; CHECK-NEXT:    ld1b.zx %s4, 2(, %s0)
; CHECK-NEXT:    sll %s1, %s1, 8
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    sll %s2, %s3, 8
; CHECK-NEXT:    or %s2, %s2, %s4
; CHECK-NEXT:    sll %s2, %s2, 16
; CHECK-NEXT:    or %s1, %s2, %s1
; CHECK-NEXT:    ld1b.zx %s2, 5(, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 4(, %s0)
; CHECK-NEXT:    ld1b.zx %s4, 7(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, 6(, %s0)
; CHECK-NEXT:    sll %s2, %s2, 8
; CHECK-NEXT:    or %s2, %s2, %s3
; CHECK-NEXT:    sll %s3, %s4, 8
; CHECK-NEXT:    or %s0, %s3, %s0
; CHECK-NEXT:    sll %s0, %s0, 16
; CHECK-NEXT:    or %s0, %s0, %s2
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load i64, i64* @vi64, align 1
  ret i64 %1
}

; Function Attrs: norecurse nounwind readonly
define i32 @loadi32com() {
; CHECK-LABEL: loadi32com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vi32@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vi32@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s1, 1(, %s0)
; CHECK-NEXT:    ld1b.zx %s2, (, %s0)
; CHECK-NEXT:    ld1b.zx %s3, 3(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, 2(, %s0)
; CHECK-NEXT:    sll %s1, %s1, 8
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    sll %s2, %s3, 8
; CHECK-NEXT:    or %s0, %s2, %s0
; CHECK-NEXT:    sll %s0, %s0, 16
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load i32, i32* @vi32, align 1
  ret i32 %1
}

; Function Attrs: norecurse nounwind readonly
define i16 @loadi16com() {
; CHECK-LABEL: loadi16com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vi16@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vi16@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s1, 1(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, (, %s0)
; CHECK-NEXT:    sll %s1, %s1, 8
; CHECK-NEXT:    or %s0, %s1, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load i16, i16* @vi16, align 1
  ret i16 %1
}

; Function Attrs: norecurse nounwind readonly
define i8 @loadi8com() {
; CHECK-LABEL: loadi8com:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, vi8@lo
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea.sl %s0, vi8@hi(, %s0)
; CHECK-NEXT:    ld1b.zx %s0, (, %s0)
; CHECK-NEXT:    b.l.t (, %s10)
  %1 = load i8, i8* @vi8, align 1
  ret i8 %1
}

