; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown | FileCheck %s

; Function Attrs: norecurse nounwind readonly
define fastcc <512 x i32> @brd_shl_v512i32(<512 x i32>, i32) {
; CHECK-LABEL: brd_shl_v512i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    sll %s1, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <512 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <512 x i32> %vec0, <512 x i32> undef, <512 x i32> zeroinitializer
  %ret = shl <512 x i32> %0, %vec
  ret <512 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <512 x i32> @brd_lshr_v512i32(<512 x i32>, i32) {
; CHECK-LABEL: brd_lshr_v512i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    sll %s1, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsrl %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <512 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <512 x i32> %vec0, <512 x i32> undef, <512 x i32> zeroinitializer
  %ret = lshr <512 x i32> %0, %vec
  ret <512 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <512 x i32> @brd_ashr_v512i32(<512 x i32>, i32) {
; CHECK-LABEL: brd_ashr_v512i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    sll %s1, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsra %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <512 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <512 x i32> %vec0, <512 x i32> undef, <512 x i32> zeroinitializer
  %ret = ashr <512 x i32> %0, %vec
  ret <512 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i64> @brd_shl_v256i64(<256 x i64>, i64) {
; CHECK-LABEL: brd_shl_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <256 x i64> %vec0, <256 x i64> undef, <256 x i32> zeroinitializer
  %ret = shl <256 x i64> %0, %vec
  ret <256 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i64> @brd_lshr_v256i64(<256 x i64>, i64) {
; CHECK-LABEL: brd_lshr_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsrl %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <256 x i64> %vec0, <256 x i64> undef, <256 x i32> zeroinitializer
  %ret = lshr <256 x i64> %0, %vec
  ret <256 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i64> @brd_ashr_v256i64(<256 x i64>, i64) {
; CHECK-LABEL: brd_ashr_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsra.l %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <256 x i64> %vec0, <256 x i64> undef, <256 x i32> zeroinitializer
  %ret = ashr <256 x i64> %0, %vec
  ret <256 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i32> @brd_shl_v256i32(<256 x i32>, i32) {
; CHECK-LABEL: brd_shl_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsll.lo %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <256 x i32> %vec0, <256 x i32> undef, <256 x i32> zeroinitializer
  %ret = shl <256 x i32> %0, %vec
  ret <256 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i32> @brd_lshr_v256i32(<256 x i32>, i32) {
; CHECK-LABEL: brd_lshr_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsrl.lo %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <256 x i32> %vec0, <256 x i32> undef, <256 x i32> zeroinitializer
  %ret = lshr <256 x i32> %0, %vec
  ret <256 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <256 x i32> @brd_ashr_v256i32(<256 x i32>, i32) {
; CHECK-LABEL: brd_ashr_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    pvsra.lo %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <256 x i32> undef, i32 %1, i32 0
  %vec = shufflevector <256 x i32> %vec0, <256 x i32> undef, <256 x i32> zeroinitializer
  %ret = ashr <256 x i32> %0, %vec
  ret <256 x i32> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <128 x i64> @brd_shl_v128i64(<128 x i64>, i64) {
; CHECK-LABEL: brd_shl_v128i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <128 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <128 x i64> %vec0, <128 x i64> undef, <128 x i32> zeroinitializer
  %ret = shl <128 x i64> %0, %vec
  ret <128 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <64 x i64> @brd_shl_v64i64(<64 x i64>, i64) {
; CHECK-LABEL: brd_shl_v64i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 64
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <64 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <64 x i64> %vec0, <64 x i64> undef, <64 x i32> zeroinitializer
  %ret = shl <64 x i64> %0, %vec
  ret <64 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <32 x i64> @brd_shl_v32i64(<32 x i64>, i64) {
; CHECK-LABEL: brd_shl_v32i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s1, 32, (0)1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <32 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <32 x i64> %vec0, <32 x i64> undef, <32 x i32> zeroinitializer
  %ret = shl <32 x i64> %0, %vec
  ret <32 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <16 x i64> @brd_shl_v16i64(<16 x i64>, i64) {
; CHECK-LABEL: brd_shl_v16i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s1, 16, (0)1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <16 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <16 x i64> %vec0, <16 x i64> undef, <16 x i32> zeroinitializer
  %ret = shl <16 x i64> %0, %vec
  ret <16 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <8 x i64> @brd_shl_v8i64(<8 x i64>, i64) {
; CHECK-LABEL: brd_shl_v8i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s1, 8, (0)1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <8 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <8 x i64> %vec0, <8 x i64> undef, <8 x i32> zeroinitializer
  %ret = shl <8 x i64> %0, %vec
  ret <8 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <4 x i64> @brd_shl_v4i64(<4 x i64>, i64) {
; CHECK-LABEL: brd_shl_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s1, 4, (0)1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <4 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <4 x i64> %vec0, <4 x i64> undef, <4 x i32> zeroinitializer
  %ret = shl <4 x i64> %0, %vec
  ret <4 x i64> %ret
}

; Function Attrs: norecurse nounwind readonly
define fastcc <2 x i64> @brd_shl_v2i64(<2 x i64>, i64) {
; CHECK-LABEL: brd_shl_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s1, 2, (0)1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vsll %v0, %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %vec0 = insertelement <2 x i64> undef, i64 %1, i32 0
  %vec = shufflevector <2 x i64> %vec0, <2 x i64> undef, <2 x i32> zeroinitializer
  %ret = shl <2 x i64> %0, %vec
  ret <2 x i64> %ret
}

