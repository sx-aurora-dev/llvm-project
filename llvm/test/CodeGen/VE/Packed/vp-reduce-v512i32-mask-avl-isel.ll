; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 --march=ve -mattr=+packed %s -o=/dev/stdout | FileCheck %s

define fastcc void @test_vp_harness(<512 x i32>* %Out, <512 x i32> %i0) {
; CHECK-LABEL: test_vp_harness:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    vst %v0, 8, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  store <512 x i32> %i0, <512 x i32>* %Out
  ret void
}

;;; FMUL ;;;
define fastcc float @test_reduce_fmul(<512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s4, 0, %s0
; CHECK-NEXT:    adds.w.sx %s1, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    srl %s0, %s0, 1
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    lea.sl %s0, 1065353216
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    vfim.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfim.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fmul.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fmul.v512f32(float 1.0, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fmul_start(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmul_start:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    or %s4, 0, %s1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    vfim.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfim.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fmul.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fmul.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fmul_fast(<512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmul_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s4, 0, %s0
; CHECK-NEXT:    adds.w.sx %s1, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    srl %s0, %s0, 1
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    lea.sl %s0, 1065353216
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    vfim.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfim.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fmul.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call fast float @llvm.vp.reduce.fmul.v512f32(float 1.0, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fmul_start_fast(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmul_start_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    or %s4, 0, %s1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    vfim.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfim.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fmul.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call fast float @llvm.vp.reduce.fmul.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

;;; FADD ;;;
define fastcc float @test_reduce_fadd(<512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fadd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or %s4, 0, %s0
; CHECK-NEXT:    adds.w.sx %s1, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    srl %s0, %s0, 1
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    lea.sl %s0, 0
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    vfia.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfia.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fadd.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fadd.v512f32(float 0.0, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fadd_start(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fadd_start:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    or %s4, 0, %s1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s4
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v1, 0, %v1, %vm2
; CHECK-NEXT:    vfia.s %v1, %v1, %s0
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    # implicit-def: $sx3
; CHECK-NEXT:    or %s3, 0, %s4
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    srl %s3, %s3, 1
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    lvl %s3
; CHECK-NEXT:    vshf %v0, %v0, %v0, 4
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vmrg %v0, 0, %v0, %vm3
; CHECK-NEXT:    vfia.s %v0, %v0, %s0
; CHECK-NEXT:    lvs %s0, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fadd.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fadd.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fadd_fast(<512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fadd_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 4
; CHECK-NEXT:    adds.w.sx %s1, 1, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    srl %s0, %s0, 1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfsum.s %v1, %v1, %vm3
; CHECK-NEXT:    lvs %s0, %v1(0)
; CHECK-NEXT:    vfsum.s %v0, %v0, %vm2
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s0, 0, %s0
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    fadd.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call fast float @llvm.vp.reduce.fadd.v512f32(float 0.0, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

define fastcc float @test_reduce_fadd_start_fast(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fadd_start_fast:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    and %s2, %s2, (32)0
; CHECK-NEXT:    srl %s2, %s2, 1
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vshf %v1, %v0, %v0, 4
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vfsum.s %v1, %v1, %vm3
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    vfsum.s %v0, %v0, %vm2
; CHECK-NEXT:    lvs %s2, %v0(0)
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    or %s2, 0, %s2
; CHECK-NEXT:    fadd.s %s1, %s1, %s2
; CHECK-NEXT:    fadd.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call fast float @llvm.vp.reduce.fadd.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

;;; FMIN ;;;
define fastcc float @test_reduce_fmin(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    and %s2, %s2, (32)0
; CHECK-NEXT:    srl %s2, %s2, 1
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vshf %v1, %v0, %v0, 4
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vfrmin.s.fst %v1, %v1, %vm3
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    vfrmin.s.fst %v0, %v0, %vm2
; CHECK-NEXT:    lvs %s2, %v0(0)
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    or %s2, 0, %s2
; CHECK-NEXT:    fmin.s %s1, %s1, %s2
; CHECK-NEXT:    fmin.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fmin.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

;;; FMAX ;;;
define fastcc float @test_reduce_fmax(float %s, <512 x float> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_fmax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sf0 killed $sf0 killed $sx0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    and %s2, %s2, (32)0
; CHECK-NEXT:    srl %s2, %s2, 1
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vshf %v1, %v0, %v0, 4
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    or %s2, 0, %s1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vfrmax.s.fst %v1, %v1, %vm3
; CHECK-NEXT:    lvs %s1, %v1(0)
; CHECK-NEXT:    vfrmax.s.fst %v0, %v0, %vm2
; CHECK-NEXT:    lvs %s2, %v0(0)
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    or %s2, 0, %s2
; CHECK-NEXT:    fmax.s %s1, %s1, %s2
; CHECK-NEXT:    fmax.s %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call float @llvm.vp.reduce.fmax.v512f32(float %s, <512 x float> %v, <512 x i1> %m, i32 %n)
  ret float %r
}

;;; Integer ;;;
define fastcc i32 @test_reduce_add(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_add:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vsum.w.sx %v1, %v1, %vm2
; CHECK-NEXT:    lvs %s2, %v1(0)
; CHECK-NEXT:    or %s2, 0, %s2
; CHECK-NEXT:    vsum.w.sx %v0, %v0, %vm3
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s2
; CHECK-NEXT:    adds.w.sx %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.add.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_mul(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (, %s11)
; CHECK-NEXT:    st %s10, 8(, %s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s11, -1840(, %s11)
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB12_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB12_2:
; CHECK-NEXT:    st %s18, 1888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s19, 1896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s20, 1904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s21, 1912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s22, 1920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s23, 1928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s24, 1936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s25, 1944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s26, 1952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s27, 1960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s28, 1968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s29, 1976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s30, 1984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s31, 1992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s32, 2000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s33, 2008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    andm %vm1, %vm0, %vm2
; CHECK-NEXT:    andm %vm4, %vm0, %vm3
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    or %s4, 1, (0)1
; CHECK-NEXT:    or %s2, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s2
; CHECK-NEXT:    sll %s2, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s2
; CHECK-NEXT:    lea %s2, 256
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s3, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    adds.w.zx %s3, %s3, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s3
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s3, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s3
; CHECK-NEXT:    sll %s5, %s0, 32
; CHECK-NEXT:    or %s0, 0, (0)1
; CHECK-NEXT:    st %s0, 1832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lvs %s3, %v1(%s0)
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    or %s5, %s3, %s5
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v2(%s0)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    or %s5, %s5, %s6
; CHECK-NEXT:    lsv %v2(%s0), %s5
; CHECK-NEXT:    lvs %s0, %v2(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s5, 129
; CHECK-NEXT:    lvs %s5, %v0(%s5)
; CHECK-NEXT:    srl %s6, %s5, 32
; CHECK-NEXT:    or %s7, 0, %s6
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    sll %s6, %s6, 32
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v2(%s4), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    or %s0, %s0, %s5
; CHECK-NEXT:    lsv %v2(%s4), %s0
; CHECK-NEXT:    or %s5, 2, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s6, 130
; CHECK-NEXT:    lvs %s6, %v0(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v2(%s5), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v2(%s5), %s0
; CHECK-NEXT:    or %s6, 3, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s7, 131
; CHECK-NEXT:    lvs %s7, %v0(%s7)
; CHECK-NEXT:    srl %s34, %s7, 32
; CHECK-NEXT:    or %s35, 0, %s34
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    sll %s34, %s34, 32
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v2(%s6), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v2(%s6), %s0
; CHECK-NEXT:    or %s7, 4, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 132
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v2(%s7), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v2(%s7), %s0
; CHECK-NEXT:    or %s36, 5, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 133
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s37, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s37
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v2(%s36), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v2(%s36), %s0
; CHECK-NEXT:    or %s35, 6, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 134
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s37, %s34, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v2(%s35), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s37, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s37
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v2(%s35), %s0
; CHECK-NEXT:    or %s34, 7, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s37, 135
; CHECK-NEXT:    lvs %s37, %v0(%s37)
; CHECK-NEXT:    srl %s38, %s37, 32
; CHECK-NEXT:    or %s39, 0, %s38
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    sll %s38, %s38, 32
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s34), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v2(%s34), %s0
; CHECK-NEXT:    or %s37, 8, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 136
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s37), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s37), %s0
; CHECK-NEXT:    or %s44, 9, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 137
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s44), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s44), %s0
; CHECK-NEXT:    or %s43, 10, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 138
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s43), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s43), %s0
; CHECK-NEXT:    or %s42, 11, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 139
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s42), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s42), %s0
; CHECK-NEXT:    or %s41, 12, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 140
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s41), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s41), %s0
; CHECK-NEXT:    or %s40, 13, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 141
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s45, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s45
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v2(%s40), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s40), %s0
; CHECK-NEXT:    or %s39, 14, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 142
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s45, %s38, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v2(%s39), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s45, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s45
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v2(%s39), %s0
; CHECK-NEXT:    or %s38, 15, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s45, 143
; CHECK-NEXT:    lvs %s45, %v0(%s45)
; CHECK-NEXT:    srl %s46, %s45, 32
; CHECK-NEXT:    or %s47, 0, %s46
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    sll %s46, %s46, 32
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s38), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v2(%s38), %s0
; CHECK-NEXT:    or %s45, 16, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 144
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s45), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s45), %s0
; CHECK-NEXT:    or %s60, 17, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 145
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s60), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s60), %s0
; CHECK-NEXT:    or %s59, 18, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 146
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s59), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s59), %s0
; CHECK-NEXT:    or %s58, 19, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 147
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s58), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s58), %s0
; CHECK-NEXT:    or %s57, 20, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 148
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s57), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s57), %s0
; CHECK-NEXT:    or %s56, 21, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 149
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s56), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s56), %s0
; CHECK-NEXT:    or %s55, 22, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 150
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s55), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s55), %s0
; CHECK-NEXT:    or %s54, 23, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 151
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s54), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s54), %s0
; CHECK-NEXT:    or %s53, 24, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 152
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s53), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s53), %s0
; CHECK-NEXT:    or %s52, 25, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 153
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s52), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s52), %s0
; CHECK-NEXT:    or %s51, 26, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 154
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s51), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s51), %s0
; CHECK-NEXT:    or %s50, 27, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 155
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s50), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s50), %s0
; CHECK-NEXT:    or %s49, 28, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 156
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s49), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s49), %s0
; CHECK-NEXT:    or %s48, 29, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 157
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s61, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s61
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v2(%s48), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s48), %s0
; CHECK-NEXT:    or %s47, 30, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 158
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s61, %s46, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v2(%s47), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s61, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s61
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v2(%s47), %s0
; CHECK-NEXT:    or %s46, 31, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s61, 159
; CHECK-NEXT:    lvs %s61, %v0(%s61)
; CHECK-NEXT:    srl %s62, %s61, 32
; CHECK-NEXT:    or %s63, 0, %s62
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    sll %s62, %s62, 32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s46), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v2(%s46), %s0
; CHECK-NEXT:    or %s61, 32, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 160
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s61), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s61), %s0
; CHECK-NEXT:    or %s0, 33, (0)1
; CHECK-NEXT:    st %s0, 1712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 161
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 34, (0)1
; CHECK-NEXT:    st %s0, 1720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 162
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 35, (0)1
; CHECK-NEXT:    st %s0, 1728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 163
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 36, (0)1
; CHECK-NEXT:    st %s0, 1736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 164
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 37, (0)1
; CHECK-NEXT:    st %s0, 1744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 165
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 38, (0)1
; CHECK-NEXT:    st %s0, 1752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 166
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 39, (0)1
; CHECK-NEXT:    st %s0, 1760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 167
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 40, (0)1
; CHECK-NEXT:    st %s0, 1768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 168
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 41, (0)1
; CHECK-NEXT:    st %s0, 1776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 169
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 42, (0)1
; CHECK-NEXT:    st %s0, 1784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 170
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 43, (0)1
; CHECK-NEXT:    st %s0, 1792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 171
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 44, (0)1
; CHECK-NEXT:    st %s0, 1800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 172
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 45, (0)1
; CHECK-NEXT:    st %s0, 1808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 173
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 46, (0)1
; CHECK-NEXT:    st %s0, 1816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 174
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s0, 47, (0)1
; CHECK-NEXT:    st %s0, 1824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 175
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v2(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v2(%s0), %s62
; CHECK-NEXT:    or %s31, 48, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 176
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s31), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s31), %s0
; CHECK-NEXT:    or %s30, 49, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 177
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s30), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s30), %s0
; CHECK-NEXT:    or %s29, 50, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 178
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s29), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s29), %s0
; CHECK-NEXT:    or %s28, 51, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 179
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s28), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s28), %s0
; CHECK-NEXT:    or %s27, 52, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 180
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s27), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s27), %s0
; CHECK-NEXT:    or %s26, 53, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 181
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s26), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s26), %s0
; CHECK-NEXT:    or %s25, 54, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 182
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s25), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s25), %s0
; CHECK-NEXT:    or %s24, 55, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 183
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s24), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s24), %s0
; CHECK-NEXT:    or %s23, 56, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 184
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s23), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s23), %s0
; CHECK-NEXT:    or %s22, 57, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 185
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s22), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s22), %s0
; CHECK-NEXT:    or %s21, 58, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 186
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s21), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s21), %s0
; CHECK-NEXT:    or %s20, 59, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 187
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s20), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s20), %s0
; CHECK-NEXT:    or %s19, 60, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 188
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s19), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s19), %s0
; CHECK-NEXT:    or %s18, 61, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 189
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s32, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s32
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v2(%s18), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s18), %s0
; CHECK-NEXT:    or %s63, 62, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 190
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s32, %s62, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v2(%s63), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s32, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v2(%s63), %s0
; CHECK-NEXT:    or %s62, 63, (0)1
; CHECK-NEXT:    lvs %s0, %v2(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    st %s0, 176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lea %s0, 191
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s0, %s0, %s33
; CHECK-NEXT:    lsv %v2(%s62), %s0
; CHECK-NEXT:    lvs %s0, %v2(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v2(%s62), %s0
; CHECK-NEXT:    lea %s0, 64
; CHECK-NEXT:    st %s0, 696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 192
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 65
; CHECK-NEXT:    st %s0, 704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 193
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 66
; CHECK-NEXT:    st %s0, 720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 194
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 67
; CHECK-NEXT:    st %s0, 736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 195
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 68
; CHECK-NEXT:    st %s0, 752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 196
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 69
; CHECK-NEXT:    st %s0, 768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 197
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 70
; CHECK-NEXT:    st %s0, 784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 198
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 71
; CHECK-NEXT:    st %s0, 800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 199
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 72
; CHECK-NEXT:    st %s0, 816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 200
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 73
; CHECK-NEXT:    st %s0, 832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 201
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 74
; CHECK-NEXT:    st %s0, 848(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 202
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 75
; CHECK-NEXT:    st %s0, 864(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 203
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 76
; CHECK-NEXT:    st %s0, 880(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 204
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 77
; CHECK-NEXT:    st %s0, 896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 205
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 78
; CHECK-NEXT:    st %s0, 912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 206
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 79
; CHECK-NEXT:    st %s0, 928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 207
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 80
; CHECK-NEXT:    st %s0, 944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 208
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 81
; CHECK-NEXT:    st %s0, 960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 209
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 82
; CHECK-NEXT:    st %s0, 976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 210
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 83
; CHECK-NEXT:    st %s0, 992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 211
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 84
; CHECK-NEXT:    st %s0, 1008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 212
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 85
; CHECK-NEXT:    st %s0, 1024(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 213
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 86
; CHECK-NEXT:    st %s0, 1040(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 214
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 87
; CHECK-NEXT:    st %s0, 1056(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 215
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 88
; CHECK-NEXT:    st %s0, 1072(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 216
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 89
; CHECK-NEXT:    st %s0, 1088(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 217
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 90
; CHECK-NEXT:    st %s0, 1104(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 218
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 91
; CHECK-NEXT:    st %s0, 1120(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 219
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 92
; CHECK-NEXT:    st %s0, 1136(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 220
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 93
; CHECK-NEXT:    st %s0, 1152(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 221
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 94
; CHECK-NEXT:    st %s0, 1168(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 222
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 95
; CHECK-NEXT:    st %s0, 1184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 223
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 96
; CHECK-NEXT:    st %s0, 1200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 224
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 97
; CHECK-NEXT:    st %s0, 1216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 225
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 98
; CHECK-NEXT:    st %s0, 1232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 226
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 99
; CHECK-NEXT:    st %s0, 1248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 227
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 100
; CHECK-NEXT:    st %s0, 1264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 228
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 101
; CHECK-NEXT:    st %s0, 1280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 229
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 102
; CHECK-NEXT:    st %s0, 1296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 230
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 103
; CHECK-NEXT:    st %s0, 1312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 231
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 104
; CHECK-NEXT:    st %s0, 1328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 232
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 105
; CHECK-NEXT:    st %s0, 1344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 233
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 106
; CHECK-NEXT:    st %s0, 1360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 234
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 107
; CHECK-NEXT:    st %s0, 1376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 235
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 108
; CHECK-NEXT:    st %s0, 1392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 236
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 109
; CHECK-NEXT:    st %s0, 1408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 237
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 110
; CHECK-NEXT:    st %s0, 1424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 238
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 111
; CHECK-NEXT:    st %s0, 1440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 239
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 112
; CHECK-NEXT:    st %s0, 1456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 240
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 113
; CHECK-NEXT:    st %s0, 1472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 241
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 114
; CHECK-NEXT:    st %s0, 1488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 242
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 115
; CHECK-NEXT:    st %s0, 1504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 243
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 116
; CHECK-NEXT:    st %s0, 1520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 244
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 117
; CHECK-NEXT:    st %s0, 1536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 245
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 118
; CHECK-NEXT:    st %s0, 1552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 246
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 119
; CHECK-NEXT:    st %s0, 1568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 247
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 120
; CHECK-NEXT:    st %s0, 1584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 248
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 121
; CHECK-NEXT:    st %s0, 1600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 249
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 122
; CHECK-NEXT:    st %s0, 1616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 250
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 123
; CHECK-NEXT:    st %s0, 1632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 251
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 124
; CHECK-NEXT:    st %s0, 1648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 252
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 125
; CHECK-NEXT:    st %s0, 1664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 253
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 126
; CHECK-NEXT:    st %s0, 1680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 254
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s0), %s32
; CHECK-NEXT:    lea %s0, 127
; CHECK-NEXT:    st %s0, 1696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v2(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 255
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s32, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s33
; CHECK-NEXT:    ld %s33, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s3, %s0
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s33), %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s33, %v2(%s33)
; CHECK-NEXT:    and %s33, %s33, (32)1
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 840(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 840(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 856(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 856(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 872(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 872(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1016(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1016(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1032(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1032(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1048(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1048(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1064(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1064(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1080(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1080(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1096(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1096(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1112(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1112(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1128(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1128(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1144(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1144(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1160(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1160(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s61)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s61), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s33), %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v2(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v2(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s62), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s62), %s32
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s61, %v0(%s61)
; CHECK-NEXT:    and %s32, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s32, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    srl %s61, %s61, 32
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s61
; CHECK-NEXT:    ld %s61, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s32, %s3, %s32
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v2(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v2(%s61), %s32
; CHECK-NEXT:    lvs %s61, %v2(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v2(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s31, %v0(%s31)
; CHECK-NEXT:    srl %s32, %s31, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v2(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s31, %s31, (32)0
; CHECK-NEXT:    # kill: def $sw31 killed $sw31 killed $sx31
; CHECK-NEXT:    adds.w.zx %s32, %s31, (0)1
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v2(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s30, %v0(%s30)
; CHECK-NEXT:    srl %s31, %s30, 32
; CHECK-NEXT:    or %s32, 0, %s31
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    sll %s31, %s31, 32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v2(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s30, %s30, (32)0
; CHECK-NEXT:    # kill: def $sw30 killed $sw30 killed $sx30
; CHECK-NEXT:    adds.w.zx %s31, %s30, (0)1
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v2(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s29, %v0(%s29)
; CHECK-NEXT:    srl %s30, %s29, 32
; CHECK-NEXT:    or %s31, 0, %s30
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    sll %s30, %s30, 32
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v2(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s29, %s29, (32)0
; CHECK-NEXT:    # kill: def $sw29 killed $sw29 killed $sx29
; CHECK-NEXT:    adds.w.zx %s30, %s29, (0)1
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v2(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s28, %v0(%s28)
; CHECK-NEXT:    srl %s29, %s28, 32
; CHECK-NEXT:    or %s30, 0, %s29
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    sll %s29, %s29, 32
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v2(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s28, %s28, (32)0
; CHECK-NEXT:    # kill: def $sw28 killed $sw28 killed $sx28
; CHECK-NEXT:    adds.w.zx %s29, %s28, (0)1
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v2(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s27, %v0(%s27)
; CHECK-NEXT:    srl %s28, %s27, 32
; CHECK-NEXT:    or %s29, 0, %s28
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    sll %s28, %s28, 32
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v2(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s27, %s27, (32)0
; CHECK-NEXT:    # kill: def $sw27 killed $sw27 killed $sx27
; CHECK-NEXT:    adds.w.zx %s28, %s27, (0)1
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v2(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s26, %v0(%s26)
; CHECK-NEXT:    srl %s27, %s26, 32
; CHECK-NEXT:    or %s28, 0, %s27
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    sll %s27, %s27, 32
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v2(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s26, %s26, (32)0
; CHECK-NEXT:    # kill: def $sw26 killed $sw26 killed $sx26
; CHECK-NEXT:    adds.w.zx %s27, %s26, (0)1
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v2(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s25, %v0(%s25)
; CHECK-NEXT:    srl %s26, %s25, 32
; CHECK-NEXT:    or %s27, 0, %s26
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    sll %s26, %s26, 32
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v2(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s25, %s25, (32)0
; CHECK-NEXT:    # kill: def $sw25 killed $sw25 killed $sx25
; CHECK-NEXT:    adds.w.zx %s26, %s25, (0)1
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v2(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s24, %v0(%s24)
; CHECK-NEXT:    srl %s25, %s24, 32
; CHECK-NEXT:    or %s26, 0, %s25
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    sll %s25, %s25, 32
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v2(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s24, %s24, (32)0
; CHECK-NEXT:    # kill: def $sw24 killed $sw24 killed $sx24
; CHECK-NEXT:    adds.w.zx %s25, %s24, (0)1
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v2(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s23, %v0(%s23)
; CHECK-NEXT:    srl %s24, %s23, 32
; CHECK-NEXT:    or %s25, 0, %s24
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    sll %s24, %s24, 32
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v2(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s23, %s23, (32)0
; CHECK-NEXT:    # kill: def $sw23 killed $sw23 killed $sx23
; CHECK-NEXT:    adds.w.zx %s24, %s23, (0)1
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v2(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s22, %v0(%s22)
; CHECK-NEXT:    srl %s23, %s22, 32
; CHECK-NEXT:    or %s24, 0, %s23
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    sll %s23, %s23, 32
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v2(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s22, %s22, (32)0
; CHECK-NEXT:    # kill: def $sw22 killed $sw22 killed $sx22
; CHECK-NEXT:    adds.w.zx %s23, %s22, (0)1
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v2(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s21, %v0(%s21)
; CHECK-NEXT:    srl %s22, %s21, 32
; CHECK-NEXT:    or %s23, 0, %s22
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    sll %s22, %s22, 32
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v2(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s21, %s21, (32)0
; CHECK-NEXT:    # kill: def $sw21 killed $sw21 killed $sx21
; CHECK-NEXT:    adds.w.zx %s22, %s21, (0)1
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v2(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s20, %v0(%s20)
; CHECK-NEXT:    srl %s21, %s20, 32
; CHECK-NEXT:    or %s22, 0, %s21
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    sll %s21, %s21, 32
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v2(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s20, %s20, (32)0
; CHECK-NEXT:    # kill: def $sw20 killed $sw20 killed $sx20
; CHECK-NEXT:    adds.w.zx %s21, %s20, (0)1
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v2(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s19, %v0(%s19)
; CHECK-NEXT:    srl %s20, %s19, 32
; CHECK-NEXT:    or %s21, 0, %s20
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    sll %s20, %s20, 32
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v2(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s19, %s19, (32)0
; CHECK-NEXT:    # kill: def $sw19 killed $sw19 killed $sx19
; CHECK-NEXT:    adds.w.zx %s20, %s19, (0)1
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v2(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s18, %v0(%s18)
; CHECK-NEXT:    srl %s19, %s18, 32
; CHECK-NEXT:    or %s20, 0, %s19
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    sll %s19, %s19, 32
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v2(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s18, %s18, (32)0
; CHECK-NEXT:    # kill: def $sw18 killed $sw18 killed $sx18
; CHECK-NEXT:    adds.w.zx %s19, %s18, (0)1
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v2(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s63, %v0(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v2(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v2(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s62, %v0(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v2(%s46), %s61
; CHECK-NEXT:    lvs %s61, %v2(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s61, %s61, %s62
; CHECK-NEXT:    lsv %v2(%s46), %s61
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s45, %v0(%s45)
; CHECK-NEXT:    and %s61, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    srl %s45, %s45, 32
; CHECK-NEXT:    or %s62, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s62
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s45, %s3, %s45
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s0)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v2(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s60, %v0(%s60)
; CHECK-NEXT:    srl %s61, %s60, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v2(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s60, %s60, (32)0
; CHECK-NEXT:    # kill: def $sw60 killed $sw60 killed $sx60
; CHECK-NEXT:    adds.w.zx %s61, %s60, (0)1
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v2(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s59, %v0(%s59)
; CHECK-NEXT:    srl %s60, %s59, 32
; CHECK-NEXT:    or %s61, 0, %s60
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    sll %s60, %s60, 32
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v2(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s59, %s59, (32)0
; CHECK-NEXT:    # kill: def $sw59 killed $sw59 killed $sx59
; CHECK-NEXT:    adds.w.zx %s60, %s59, (0)1
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v2(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s58, %v0(%s58)
; CHECK-NEXT:    srl %s59, %s58, 32
; CHECK-NEXT:    or %s60, 0, %s59
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    sll %s59, %s59, 32
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v2(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s58, %s58, (32)0
; CHECK-NEXT:    # kill: def $sw58 killed $sw58 killed $sx58
; CHECK-NEXT:    adds.w.zx %s59, %s58, (0)1
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v2(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s57, %v0(%s57)
; CHECK-NEXT:    srl %s58, %s57, 32
; CHECK-NEXT:    or %s59, 0, %s58
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    sll %s58, %s58, 32
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v2(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s57, %s57, (32)0
; CHECK-NEXT:    # kill: def $sw57 killed $sw57 killed $sx57
; CHECK-NEXT:    adds.w.zx %s58, %s57, (0)1
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v2(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s56, %v0(%s56)
; CHECK-NEXT:    srl %s57, %s56, 32
; CHECK-NEXT:    or %s58, 0, %s57
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    sll %s57, %s57, 32
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v2(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s56, %s56, (32)0
; CHECK-NEXT:    # kill: def $sw56 killed $sw56 killed $sx56
; CHECK-NEXT:    adds.w.zx %s57, %s56, (0)1
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v2(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s55, %v0(%s55)
; CHECK-NEXT:    srl %s56, %s55, 32
; CHECK-NEXT:    or %s57, 0, %s56
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    sll %s56, %s56, 32
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v2(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s55, %s55, (32)0
; CHECK-NEXT:    # kill: def $sw55 killed $sw55 killed $sx55
; CHECK-NEXT:    adds.w.zx %s56, %s55, (0)1
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v2(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s54, %v0(%s54)
; CHECK-NEXT:    srl %s55, %s54, 32
; CHECK-NEXT:    or %s56, 0, %s55
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    sll %s55, %s55, 32
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v2(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s54, %s54, (32)0
; CHECK-NEXT:    # kill: def $sw54 killed $sw54 killed $sx54
; CHECK-NEXT:    adds.w.zx %s55, %s54, (0)1
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v2(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s53, %v0(%s53)
; CHECK-NEXT:    srl %s54, %s53, 32
; CHECK-NEXT:    or %s55, 0, %s54
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    sll %s54, %s54, 32
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v2(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s53, %s53, (32)0
; CHECK-NEXT:    # kill: def $sw53 killed $sw53 killed $sx53
; CHECK-NEXT:    adds.w.zx %s54, %s53, (0)1
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v2(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s52, %v0(%s52)
; CHECK-NEXT:    srl %s53, %s52, 32
; CHECK-NEXT:    or %s54, 0, %s53
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    sll %s53, %s53, 32
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v2(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s52, %s52, (32)0
; CHECK-NEXT:    # kill: def $sw52 killed $sw52 killed $sx52
; CHECK-NEXT:    adds.w.zx %s53, %s52, (0)1
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v2(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s51, %v0(%s51)
; CHECK-NEXT:    srl %s52, %s51, 32
; CHECK-NEXT:    or %s53, 0, %s52
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    sll %s52, %s52, 32
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v2(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s51, %s51, (32)0
; CHECK-NEXT:    # kill: def $sw51 killed $sw51 killed $sx51
; CHECK-NEXT:    adds.w.zx %s52, %s51, (0)1
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v2(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s50, %v0(%s50)
; CHECK-NEXT:    srl %s51, %s50, 32
; CHECK-NEXT:    or %s52, 0, %s51
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    sll %s51, %s51, 32
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v2(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s50, %s50, (32)0
; CHECK-NEXT:    # kill: def $sw50 killed $sw50 killed $sx50
; CHECK-NEXT:    adds.w.zx %s51, %s50, (0)1
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v2(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s49, %v0(%s49)
; CHECK-NEXT:    srl %s50, %s49, 32
; CHECK-NEXT:    or %s51, 0, %s50
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    sll %s50, %s50, 32
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v2(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s49, %s49, (32)0
; CHECK-NEXT:    # kill: def $sw49 killed $sw49 killed $sx49
; CHECK-NEXT:    adds.w.zx %s50, %s49, (0)1
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v2(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s48, %v0(%s48)
; CHECK-NEXT:    srl %s49, %s48, 32
; CHECK-NEXT:    or %s50, 0, %s49
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    sll %s49, %s49, 32
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v2(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s48, %s48, (32)0
; CHECK-NEXT:    # kill: def $sw48 killed $sw48 killed $sx48
; CHECK-NEXT:    adds.w.zx %s49, %s48, (0)1
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v2(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s47, %v0(%s47)
; CHECK-NEXT:    srl %s48, %s47, 32
; CHECK-NEXT:    or %s49, 0, %s48
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    sll %s48, %s48, 32
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v2(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s47, %s47, (32)0
; CHECK-NEXT:    # kill: def $sw47 killed $sw47 killed $sx47
; CHECK-NEXT:    adds.w.zx %s48, %s47, (0)1
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v2(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v2(%s38), %s45
; CHECK-NEXT:    lvs %s45, %v2(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s45, %s45, %s46
; CHECK-NEXT:    lsv %v2(%s38), %s45
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s37, %v0(%s37)
; CHECK-NEXT:    and %s45, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    srl %s37, %s37, 32
; CHECK-NEXT:    or %s46, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s46
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s37, %s3, %s37
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s0)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v2(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s44, %v0(%s44)
; CHECK-NEXT:    srl %s45, %s44, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v2(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s44, %s44, (32)0
; CHECK-NEXT:    # kill: def $sw44 killed $sw44 killed $sx44
; CHECK-NEXT:    adds.w.zx %s45, %s44, (0)1
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v2(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s43, %v0(%s43)
; CHECK-NEXT:    srl %s44, %s43, 32
; CHECK-NEXT:    or %s45, 0, %s44
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    sll %s44, %s44, 32
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v2(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s43, %s43, (32)0
; CHECK-NEXT:    # kill: def $sw43 killed $sw43 killed $sx43
; CHECK-NEXT:    adds.w.zx %s44, %s43, (0)1
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v2(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s42, %v0(%s42)
; CHECK-NEXT:    srl %s43, %s42, 32
; CHECK-NEXT:    or %s44, 0, %s43
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    sll %s43, %s43, 32
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v2(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s42, %s42, (32)0
; CHECK-NEXT:    # kill: def $sw42 killed $sw42 killed $sx42
; CHECK-NEXT:    adds.w.zx %s43, %s42, (0)1
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v2(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s41, %v0(%s41)
; CHECK-NEXT:    srl %s42, %s41, 32
; CHECK-NEXT:    or %s43, 0, %s42
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    sll %s42, %s42, 32
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v2(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s41, %s41, (32)0
; CHECK-NEXT:    # kill: def $sw41 killed $sw41 killed $sx41
; CHECK-NEXT:    adds.w.zx %s42, %s41, (0)1
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v2(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s40, %v0(%s40)
; CHECK-NEXT:    srl %s41, %s40, 32
; CHECK-NEXT:    or %s42, 0, %s41
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    sll %s41, %s41, 32
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v2(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s40, %s40, (32)0
; CHECK-NEXT:    # kill: def $sw40 killed $sw40 killed $sx40
; CHECK-NEXT:    adds.w.zx %s41, %s40, (0)1
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v2(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s39, %v0(%s39)
; CHECK-NEXT:    srl %s40, %s39, 32
; CHECK-NEXT:    or %s41, 0, %s40
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    sll %s40, %s40, 32
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v2(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s39, %s39, (32)0
; CHECK-NEXT:    # kill: def $sw39 killed $sw39 killed $sx39
; CHECK-NEXT:    adds.w.zx %s40, %s39, (0)1
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v2(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s38, %v0(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v2(%s34), %s37
; CHECK-NEXT:    lvs %s37, %v2(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s37, %s37, %s38
; CHECK-NEXT:    lsv %v2(%s34), %s37
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s7, %v0(%s7)
; CHECK-NEXT:    and %s37, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    srl %s7, %s7, 32
; CHECK-NEXT:    or %s38, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s38
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s7, %s3, %s7
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s0)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v2(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s36, %v0(%s36)
; CHECK-NEXT:    srl %s37, %s36, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v2(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s36, %s36, (32)0
; CHECK-NEXT:    # kill: def $sw36 killed $sw36 killed $sx36
; CHECK-NEXT:    adds.w.zx %s37, %s36, (0)1
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v2(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s35, %v0(%s35)
; CHECK-NEXT:    srl %s36, %s35, 32
; CHECK-NEXT:    or %s37, 0, %s36
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    sll %s36, %s36, 32
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v2(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s35, %s35, (32)0
; CHECK-NEXT:    # kill: def $sw35 killed $sw35 killed $sx35
; CHECK-NEXT:    adds.w.zx %s36, %s35, (0)1
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v2(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v2(%s6), %s7
; CHECK-NEXT:    lvs %s7, %v2(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s7, %s7, %s34
; CHECK-NEXT:    lsv %v2(%s6), %s7
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s5, %v0(%s5)
; CHECK-NEXT:    and %s7, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    srl %s5, %s5, 32
; CHECK-NEXT:    or %s34, 0, %s5
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s34
; CHECK-NEXT:    sll %s5, %s5, 32
; CHECK-NEXT:    or %s5, %s3, %s5
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v2(%s0)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v2(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v2(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    lvs %s6, %v0(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v2(%s4), %s5
; CHECK-NEXT:    lvs %s5, %v2(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s5, %s5, %s6
; CHECK-NEXT:    lsv %v2(%s4), %s5
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s4, %v0(%s4)
; CHECK-NEXT:    and %s5, %s4, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    srl %s4, %s4, 32
; CHECK-NEXT:    or %s6, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s6
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s4, %s3, %s4
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v2(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v2(%s0), %s4
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s4, %v0(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)0
; CHECK-NEXT:    or %s5, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s5
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s3, %s3, %s4
; CHECK-NEXT:    # implicit-def: $v2
; CHECK-NEXT:    lsv %v2(%s0), %s3
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vshf %v3, %v2, %v2, 0
; CHECK-NEXT:    vmuls.w.sx %v1, %v1, %v3
; CHECK-NEXT:    vmuls.w.sx %v0, %v0, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v1, 13
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    muls.w.sx %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    ld %s33, 2008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s32, 2000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s31, 1992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s30, 1984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s29, 1976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s28, 1968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s27, 1960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s26, 1952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s25, 1944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s24, 1936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s23, 1928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s22, 1920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s21, 1912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s20, 1904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s19, 1896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s18, 1888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s10, 8(, %s11)
; CHECK-NEXT:    ld %s9, (, %s11)
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.mul.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_and(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_and:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vrand %v1, %v1, %vm2
; CHECK-NEXT:    lvs %s2, %v1(0)
; CHECK-NEXT:    or %s3, 0, %s2
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s3
; CHECK-NEXT:    vrand %v0, %v0, %vm3
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s3, 0, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s3
; CHECK-NEXT:    and %s1, %s1, %s2
; CHECK-NEXT:    and %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.and.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_or(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_or:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vror %v1, %v1, %vm2
; CHECK-NEXT:    lvs %s2, %v1(0)
; CHECK-NEXT:    or %s3, 0, %s2
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s3
; CHECK-NEXT:    vror %v0, %v0, %vm3
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s3, 0, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s3
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.or.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_xor(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_xor:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vrxor %v1, %v1, %vm2
; CHECK-NEXT:    lvs %s2, %v1(0)
; CHECK-NEXT:    or %s3, 0, %s2
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s3
; CHECK-NEXT:    vrxor %v0, %v0, %vm3
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s3, 0, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s3
; CHECK-NEXT:    xor %s1, %s1, %s2
; CHECK-NEXT:    xor %s0, %s0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.xor.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_smin(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; TODO: map to smax
; CHECK-LABEL: test_reduce_smin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (, %s11)
; CHECK-NEXT:    st %s10, 8(, %s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s11, -1840(, %s11)
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB16_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB16_2:
; CHECK-NEXT:    st %s18, 1888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s19, 1896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s20, 1904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s21, 1912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s22, 1920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s23, 1928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s24, 1936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s25, 1944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s26, 1952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s27, 1960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s28, 1968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s29, 1976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s30, 1984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s31, 1992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s32, 2000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s33, 2008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    andm %vm1, %vm0, %vm2
; CHECK-NEXT:    andm %vm4, %vm0, %vm3
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    lea %s0, 2147483647
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s2
; CHECK-NEXT:    sll %s2, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s2
; CHECK-NEXT:    lea %s2, 256
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vbrd %v1, %s0
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    and %s3, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw3 killed $sw3 killed $sx3
; CHECK-NEXT:    adds.w.zx %s3, %s3, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s3
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s3, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s3
; CHECK-NEXT:    sll %s4, %s0, 32
; CHECK-NEXT:    or %s0, 0, (0)1
; CHECK-NEXT:    st %s0, 1832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lvs %s3, %v0(%s0)
; CHECK-NEXT:    and %s3, %s3, (32)0
; CHECK-NEXT:    or %s4, %s3, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v0(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    or %s4, 1, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s5, 129
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    srl %s6, %s5, 32
; CHECK-NEXT:    or %s7, 0, %s6
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    sll %s6, %s6, 32
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    or %s0, %s0, %s5
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    or %s5, 2, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s6, 130
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    or %s6, 3, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s7, 131
; CHECK-NEXT:    lvs %s7, %v1(%s7)
; CHECK-NEXT:    srl %s34, %s7, 32
; CHECK-NEXT:    or %s35, 0, %s34
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    sll %s34, %s34, 32
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    or %s7, 4, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 132
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    or %s36, 5, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 133
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s37, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s37
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    or %s35, 6, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 134
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s37, %s34, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s37, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s37
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    or %s34, 7, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s37, 135
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    srl %s38, %s37, 32
; CHECK-NEXT:    or %s39, 0, %s38
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    sll %s38, %s38, 32
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    or %s37, 8, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 136
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    or %s44, 9, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 137
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    or %s43, 10, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 138
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    or %s42, 11, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 139
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    or %s41, 12, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 140
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    or %s40, 13, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 141
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s45, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s45
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    or %s39, 14, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 142
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s45, %s38, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s45, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s45
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    or %s38, 15, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s45, 143
; CHECK-NEXT:    lvs %s45, %v1(%s45)
; CHECK-NEXT:    srl %s46, %s45, 32
; CHECK-NEXT:    or %s47, 0, %s46
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    sll %s46, %s46, 32
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    or %s45, 16, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 144
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    or %s60, 17, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 145
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    or %s59, 18, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 146
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    or %s58, 19, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 147
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    or %s57, 20, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 148
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    or %s56, 21, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 149
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    or %s55, 22, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 150
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    or %s54, 23, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 151
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    or %s53, 24, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 152
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    or %s52, 25, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 153
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    or %s51, 26, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 154
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    or %s50, 27, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 155
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    or %s49, 28, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 156
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    or %s48, 29, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 157
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s61, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s61
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    or %s47, 30, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 158
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s61, %s46, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s61, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s61
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    or %s46, 31, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s61, 159
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    srl %s62, %s61, 32
; CHECK-NEXT:    or %s63, 0, %s62
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    sll %s62, %s62, 32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    or %s61, 32, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 160
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    or %s0, 33, (0)1
; CHECK-NEXT:    st %s0, 1712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 161
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 34, (0)1
; CHECK-NEXT:    st %s0, 1720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 162
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 35, (0)1
; CHECK-NEXT:    st %s0, 1728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 163
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 36, (0)1
; CHECK-NEXT:    st %s0, 1736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 164
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 37, (0)1
; CHECK-NEXT:    st %s0, 1744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 165
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 38, (0)1
; CHECK-NEXT:    st %s0, 1752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 166
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 39, (0)1
; CHECK-NEXT:    st %s0, 1760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 167
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 40, (0)1
; CHECK-NEXT:    st %s0, 1768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 168
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 41, (0)1
; CHECK-NEXT:    st %s0, 1776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 169
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 42, (0)1
; CHECK-NEXT:    st %s0, 1784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 170
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 43, (0)1
; CHECK-NEXT:    st %s0, 1792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 171
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 44, (0)1
; CHECK-NEXT:    st %s0, 1800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 172
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 45, (0)1
; CHECK-NEXT:    st %s0, 1808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 173
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 46, (0)1
; CHECK-NEXT:    st %s0, 1816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 174
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 47, (0)1
; CHECK-NEXT:    st %s0, 1824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 175
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s31, 48, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 176
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    or %s30, 49, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 177
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    or %s29, 50, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 178
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    or %s28, 51, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 179
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    or %s27, 52, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 180
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    or %s26, 53, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 181
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    or %s25, 54, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 182
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    or %s24, 55, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 183
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    or %s23, 56, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 184
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    or %s22, 57, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 185
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    or %s21, 58, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 186
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    or %s20, 59, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 187
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    or %s19, 60, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 188
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    or %s18, 61, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 189
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s32, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s32
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    or %s63, 62, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 190
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s32, %s62, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s32, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    or %s62, 63, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    st %s0, 176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lea %s0, 191
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s0, %s0, %s33
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lea %s0, 64
; CHECK-NEXT:    st %s0, 696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 192
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 65
; CHECK-NEXT:    st %s0, 704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 193
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 66
; CHECK-NEXT:    st %s0, 720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 194
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 67
; CHECK-NEXT:    st %s0, 736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 195
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 68
; CHECK-NEXT:    st %s0, 752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 196
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 69
; CHECK-NEXT:    st %s0, 768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 197
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 70
; CHECK-NEXT:    st %s0, 784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 198
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 71
; CHECK-NEXT:    st %s0, 800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 199
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 72
; CHECK-NEXT:    st %s0, 816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 200
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 73
; CHECK-NEXT:    st %s0, 832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 201
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 74
; CHECK-NEXT:    st %s0, 848(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 202
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 75
; CHECK-NEXT:    st %s0, 864(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 203
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 76
; CHECK-NEXT:    st %s0, 880(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 204
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 77
; CHECK-NEXT:    st %s0, 896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 205
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 78
; CHECK-NEXT:    st %s0, 912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 206
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 79
; CHECK-NEXT:    st %s0, 928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 207
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 80
; CHECK-NEXT:    st %s0, 944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 208
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 81
; CHECK-NEXT:    st %s0, 960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 209
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 82
; CHECK-NEXT:    st %s0, 976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 210
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 83
; CHECK-NEXT:    st %s0, 992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 211
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 84
; CHECK-NEXT:    st %s0, 1008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 212
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 85
; CHECK-NEXT:    st %s0, 1024(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 213
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 86
; CHECK-NEXT:    st %s0, 1040(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 214
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 87
; CHECK-NEXT:    st %s0, 1056(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 215
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 88
; CHECK-NEXT:    st %s0, 1072(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 216
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 89
; CHECK-NEXT:    st %s0, 1088(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 217
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 90
; CHECK-NEXT:    st %s0, 1104(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 218
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 91
; CHECK-NEXT:    st %s0, 1120(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 219
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 92
; CHECK-NEXT:    st %s0, 1136(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 220
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 93
; CHECK-NEXT:    st %s0, 1152(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 221
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 94
; CHECK-NEXT:    st %s0, 1168(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 222
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 95
; CHECK-NEXT:    st %s0, 1184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 223
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 96
; CHECK-NEXT:    st %s0, 1200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 224
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 97
; CHECK-NEXT:    st %s0, 1216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 225
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 98
; CHECK-NEXT:    st %s0, 1232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 226
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 99
; CHECK-NEXT:    st %s0, 1248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 227
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 100
; CHECK-NEXT:    st %s0, 1264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 228
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 101
; CHECK-NEXT:    st %s0, 1280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 229
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 102
; CHECK-NEXT:    st %s0, 1296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 230
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 103
; CHECK-NEXT:    st %s0, 1312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 231
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 104
; CHECK-NEXT:    st %s0, 1328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 232
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 105
; CHECK-NEXT:    st %s0, 1344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 233
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 106
; CHECK-NEXT:    st %s0, 1360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 234
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 107
; CHECK-NEXT:    st %s0, 1376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 235
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 108
; CHECK-NEXT:    st %s0, 1392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 236
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 109
; CHECK-NEXT:    st %s0, 1408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 237
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 110
; CHECK-NEXT:    st %s0, 1424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 238
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 111
; CHECK-NEXT:    st %s0, 1440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 239
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 112
; CHECK-NEXT:    st %s0, 1456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 240
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 113
; CHECK-NEXT:    st %s0, 1472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 241
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 114
; CHECK-NEXT:    st %s0, 1488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 242
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 115
; CHECK-NEXT:    st %s0, 1504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 243
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 116
; CHECK-NEXT:    st %s0, 1520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 244
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 117
; CHECK-NEXT:    st %s0, 1536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 245
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 118
; CHECK-NEXT:    st %s0, 1552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 246
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 119
; CHECK-NEXT:    st %s0, 1568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 247
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 120
; CHECK-NEXT:    st %s0, 1584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 248
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 121
; CHECK-NEXT:    st %s0, 1600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 249
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 122
; CHECK-NEXT:    st %s0, 1616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 250
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 123
; CHECK-NEXT:    st %s0, 1632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 251
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 124
; CHECK-NEXT:    st %s0, 1648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 252
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 125
; CHECK-NEXT:    st %s0, 1664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 253
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 126
; CHECK-NEXT:    st %s0, 1680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 254
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 127
; CHECK-NEXT:    st %s0, 1696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 255
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s32, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s33
; CHECK-NEXT:    ld %s33, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s3, %s0
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s33), %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s33, %v1(%s33)
; CHECK-NEXT:    and %s33, %s33, (32)1
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 840(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 840(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 856(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 856(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 872(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 872(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1016(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1016(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1032(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1032(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1048(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1048(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1064(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1064(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1080(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1080(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1096(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1096(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1112(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1112(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1128(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1128(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1144(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1144(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1160(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1160(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s61), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    and %s32, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s32, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    srl %s61, %s61, 32
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s61
; CHECK-NEXT:    ld %s61, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s32, %s3, %s32
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v0(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s31, %v1(%s31)
; CHECK-NEXT:    srl %s32, %s31, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s31, %s31, (32)0
; CHECK-NEXT:    # kill: def $sw31 killed $sw31 killed $sx31
; CHECK-NEXT:    adds.w.zx %s32, %s31, (0)1
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s30, %v1(%s30)
; CHECK-NEXT:    srl %s31, %s30, 32
; CHECK-NEXT:    or %s32, 0, %s31
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    sll %s31, %s31, 32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s30, %s30, (32)0
; CHECK-NEXT:    # kill: def $sw30 killed $sw30 killed $sx30
; CHECK-NEXT:    adds.w.zx %s31, %s30, (0)1
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s29, %v1(%s29)
; CHECK-NEXT:    srl %s30, %s29, 32
; CHECK-NEXT:    or %s31, 0, %s30
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    sll %s30, %s30, 32
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s29, %s29, (32)0
; CHECK-NEXT:    # kill: def $sw29 killed $sw29 killed $sx29
; CHECK-NEXT:    adds.w.zx %s30, %s29, (0)1
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s28, %v1(%s28)
; CHECK-NEXT:    srl %s29, %s28, 32
; CHECK-NEXT:    or %s30, 0, %s29
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    sll %s29, %s29, 32
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s28, %s28, (32)0
; CHECK-NEXT:    # kill: def $sw28 killed $sw28 killed $sx28
; CHECK-NEXT:    adds.w.zx %s29, %s28, (0)1
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s27, %v1(%s27)
; CHECK-NEXT:    srl %s28, %s27, 32
; CHECK-NEXT:    or %s29, 0, %s28
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    sll %s28, %s28, 32
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s27, %s27, (32)0
; CHECK-NEXT:    # kill: def $sw27 killed $sw27 killed $sx27
; CHECK-NEXT:    adds.w.zx %s28, %s27, (0)1
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s26, %v1(%s26)
; CHECK-NEXT:    srl %s27, %s26, 32
; CHECK-NEXT:    or %s28, 0, %s27
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    sll %s27, %s27, 32
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s26, %s26, (32)0
; CHECK-NEXT:    # kill: def $sw26 killed $sw26 killed $sx26
; CHECK-NEXT:    adds.w.zx %s27, %s26, (0)1
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s25, %v1(%s25)
; CHECK-NEXT:    srl %s26, %s25, 32
; CHECK-NEXT:    or %s27, 0, %s26
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    sll %s26, %s26, 32
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s25, %s25, (32)0
; CHECK-NEXT:    # kill: def $sw25 killed $sw25 killed $sx25
; CHECK-NEXT:    adds.w.zx %s26, %s25, (0)1
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s24, %v1(%s24)
; CHECK-NEXT:    srl %s25, %s24, 32
; CHECK-NEXT:    or %s26, 0, %s25
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    sll %s25, %s25, 32
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s24, %s24, (32)0
; CHECK-NEXT:    # kill: def $sw24 killed $sw24 killed $sx24
; CHECK-NEXT:    adds.w.zx %s25, %s24, (0)1
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s23, %v1(%s23)
; CHECK-NEXT:    srl %s24, %s23, 32
; CHECK-NEXT:    or %s25, 0, %s24
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    sll %s24, %s24, 32
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s23, %s23, (32)0
; CHECK-NEXT:    # kill: def $sw23 killed $sw23 killed $sx23
; CHECK-NEXT:    adds.w.zx %s24, %s23, (0)1
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s22, %v1(%s22)
; CHECK-NEXT:    srl %s23, %s22, 32
; CHECK-NEXT:    or %s24, 0, %s23
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    sll %s23, %s23, 32
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s22, %s22, (32)0
; CHECK-NEXT:    # kill: def $sw22 killed $sw22 killed $sx22
; CHECK-NEXT:    adds.w.zx %s23, %s22, (0)1
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s21, %v1(%s21)
; CHECK-NEXT:    srl %s22, %s21, 32
; CHECK-NEXT:    or %s23, 0, %s22
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    sll %s22, %s22, 32
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s21, %s21, (32)0
; CHECK-NEXT:    # kill: def $sw21 killed $sw21 killed $sx21
; CHECK-NEXT:    adds.w.zx %s22, %s21, (0)1
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s20, %v1(%s20)
; CHECK-NEXT:    srl %s21, %s20, 32
; CHECK-NEXT:    or %s22, 0, %s21
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    sll %s21, %s21, 32
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s20, %s20, (32)0
; CHECK-NEXT:    # kill: def $sw20 killed $sw20 killed $sx20
; CHECK-NEXT:    adds.w.zx %s21, %s20, (0)1
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s19, %v1(%s19)
; CHECK-NEXT:    srl %s20, %s19, 32
; CHECK-NEXT:    or %s21, 0, %s20
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    sll %s20, %s20, 32
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s19, %s19, (32)0
; CHECK-NEXT:    # kill: def $sw19 killed $sw19 killed $sx19
; CHECK-NEXT:    adds.w.zx %s20, %s19, (0)1
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s18, %v1(%s18)
; CHECK-NEXT:    srl %s19, %s18, 32
; CHECK-NEXT:    or %s20, 0, %s19
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    sll %s19, %s19, 32
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s18, %s18, (32)0
; CHECK-NEXT:    # kill: def $sw18 killed $sw18 killed $sx18
; CHECK-NEXT:    adds.w.zx %s19, %s18, (0)1
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s61, %s61, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s45, %v0(%s45)
; CHECK-NEXT:    and %s61, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    srl %s45, %s45, 32
; CHECK-NEXT:    or %s62, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s62
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s45, %s3, %s45
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s0)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s60, %v0(%s60)
; CHECK-NEXT:    srl %s61, %s60, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s60, %s60, (32)0
; CHECK-NEXT:    # kill: def $sw60 killed $sw60 killed $sx60
; CHECK-NEXT:    adds.w.zx %s61, %s60, (0)1
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s59, %v0(%s59)
; CHECK-NEXT:    srl %s60, %s59, 32
; CHECK-NEXT:    or %s61, 0, %s60
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    sll %s60, %s60, 32
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s59, %s59, (32)0
; CHECK-NEXT:    # kill: def $sw59 killed $sw59 killed $sx59
; CHECK-NEXT:    adds.w.zx %s60, %s59, (0)1
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s58, %v0(%s58)
; CHECK-NEXT:    srl %s59, %s58, 32
; CHECK-NEXT:    or %s60, 0, %s59
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    sll %s59, %s59, 32
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s58, %s58, (32)0
; CHECK-NEXT:    # kill: def $sw58 killed $sw58 killed $sx58
; CHECK-NEXT:    adds.w.zx %s59, %s58, (0)1
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s57, %v0(%s57)
; CHECK-NEXT:    srl %s58, %s57, 32
; CHECK-NEXT:    or %s59, 0, %s58
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    sll %s58, %s58, 32
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s57, %s57, (32)0
; CHECK-NEXT:    # kill: def $sw57 killed $sw57 killed $sx57
; CHECK-NEXT:    adds.w.zx %s58, %s57, (0)1
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s56, %v0(%s56)
; CHECK-NEXT:    srl %s57, %s56, 32
; CHECK-NEXT:    or %s58, 0, %s57
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    sll %s57, %s57, 32
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s56, %s56, (32)0
; CHECK-NEXT:    # kill: def $sw56 killed $sw56 killed $sx56
; CHECK-NEXT:    adds.w.zx %s57, %s56, (0)1
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s55, %v0(%s55)
; CHECK-NEXT:    srl %s56, %s55, 32
; CHECK-NEXT:    or %s57, 0, %s56
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    sll %s56, %s56, 32
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s55, %s55, (32)0
; CHECK-NEXT:    # kill: def $sw55 killed $sw55 killed $sx55
; CHECK-NEXT:    adds.w.zx %s56, %s55, (0)1
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s54, %v0(%s54)
; CHECK-NEXT:    srl %s55, %s54, 32
; CHECK-NEXT:    or %s56, 0, %s55
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    sll %s55, %s55, 32
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s54, %s54, (32)0
; CHECK-NEXT:    # kill: def $sw54 killed $sw54 killed $sx54
; CHECK-NEXT:    adds.w.zx %s55, %s54, (0)1
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s53, %v0(%s53)
; CHECK-NEXT:    srl %s54, %s53, 32
; CHECK-NEXT:    or %s55, 0, %s54
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    sll %s54, %s54, 32
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s53, %s53, (32)0
; CHECK-NEXT:    # kill: def $sw53 killed $sw53 killed $sx53
; CHECK-NEXT:    adds.w.zx %s54, %s53, (0)1
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s52, %v0(%s52)
; CHECK-NEXT:    srl %s53, %s52, 32
; CHECK-NEXT:    or %s54, 0, %s53
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    sll %s53, %s53, 32
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s52, %s52, (32)0
; CHECK-NEXT:    # kill: def $sw52 killed $sw52 killed $sx52
; CHECK-NEXT:    adds.w.zx %s53, %s52, (0)1
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s51, %v0(%s51)
; CHECK-NEXT:    srl %s52, %s51, 32
; CHECK-NEXT:    or %s53, 0, %s52
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    sll %s52, %s52, 32
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s51, %s51, (32)0
; CHECK-NEXT:    # kill: def $sw51 killed $sw51 killed $sx51
; CHECK-NEXT:    adds.w.zx %s52, %s51, (0)1
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s50, %v0(%s50)
; CHECK-NEXT:    srl %s51, %s50, 32
; CHECK-NEXT:    or %s52, 0, %s51
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    sll %s51, %s51, 32
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s50, %s50, (32)0
; CHECK-NEXT:    # kill: def $sw50 killed $sw50 killed $sx50
; CHECK-NEXT:    adds.w.zx %s51, %s50, (0)1
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s49, %v0(%s49)
; CHECK-NEXT:    srl %s50, %s49, 32
; CHECK-NEXT:    or %s51, 0, %s50
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    sll %s50, %s50, 32
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s49, %s49, (32)0
; CHECK-NEXT:    # kill: def $sw49 killed $sw49 killed $sx49
; CHECK-NEXT:    adds.w.zx %s50, %s49, (0)1
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s48, %v0(%s48)
; CHECK-NEXT:    srl %s49, %s48, 32
; CHECK-NEXT:    or %s50, 0, %s49
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    sll %s49, %s49, 32
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s48, %s48, (32)0
; CHECK-NEXT:    # kill: def $sw48 killed $sw48 killed $sx48
; CHECK-NEXT:    adds.w.zx %s49, %s48, (0)1
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s47, %v0(%s47)
; CHECK-NEXT:    srl %s48, %s47, 32
; CHECK-NEXT:    or %s49, 0, %s48
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    sll %s48, %s48, 32
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s47, %s47, (32)0
; CHECK-NEXT:    # kill: def $sw47 killed $sw47 killed $sx47
; CHECK-NEXT:    adds.w.zx %s48, %s47, (0)1
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s45, %s45, %s46
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    and %s45, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    srl %s37, %s37, 32
; CHECK-NEXT:    or %s46, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s46
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s37, %s3, %s37
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s0)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s44, %v1(%s44)
; CHECK-NEXT:    srl %s45, %s44, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s44, %s44, (32)0
; CHECK-NEXT:    # kill: def $sw44 killed $sw44 killed $sx44
; CHECK-NEXT:    adds.w.zx %s45, %s44, (0)1
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s43, %v1(%s43)
; CHECK-NEXT:    srl %s44, %s43, 32
; CHECK-NEXT:    or %s45, 0, %s44
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    sll %s44, %s44, 32
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s43, %s43, (32)0
; CHECK-NEXT:    # kill: def $sw43 killed $sw43 killed $sx43
; CHECK-NEXT:    adds.w.zx %s44, %s43, (0)1
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s42, %v1(%s42)
; CHECK-NEXT:    srl %s43, %s42, 32
; CHECK-NEXT:    or %s44, 0, %s43
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    sll %s43, %s43, 32
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s42, %s42, (32)0
; CHECK-NEXT:    # kill: def $sw42 killed $sw42 killed $sx42
; CHECK-NEXT:    adds.w.zx %s43, %s42, (0)1
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s41, %v1(%s41)
; CHECK-NEXT:    srl %s42, %s41, 32
; CHECK-NEXT:    or %s43, 0, %s42
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    sll %s42, %s42, 32
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s41, %s41, (32)0
; CHECK-NEXT:    # kill: def $sw41 killed $sw41 killed $sx41
; CHECK-NEXT:    adds.w.zx %s42, %s41, (0)1
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s40, %v1(%s40)
; CHECK-NEXT:    srl %s41, %s40, 32
; CHECK-NEXT:    or %s42, 0, %s41
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    sll %s41, %s41, 32
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s40, %s40, (32)0
; CHECK-NEXT:    # kill: def $sw40 killed $sw40 killed $sx40
; CHECK-NEXT:    adds.w.zx %s41, %s40, (0)1
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s39, %v1(%s39)
; CHECK-NEXT:    srl %s40, %s39, 32
; CHECK-NEXT:    or %s41, 0, %s40
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    sll %s40, %s40, 32
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s39, %s39, (32)0
; CHECK-NEXT:    # kill: def $sw39 killed $sw39 killed $sx39
; CHECK-NEXT:    adds.w.zx %s40, %s39, (0)1
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s37, %s37, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s7, %v0(%s7)
; CHECK-NEXT:    and %s37, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    srl %s7, %s7, 32
; CHECK-NEXT:    or %s38, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s38
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s7, %s3, %s7
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s0)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s36, %v0(%s36)
; CHECK-NEXT:    srl %s37, %s36, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s36, %s36, (32)0
; CHECK-NEXT:    # kill: def $sw36 killed $sw36 killed $sx36
; CHECK-NEXT:    adds.w.zx %s37, %s36, (0)1
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s35, %v0(%s35)
; CHECK-NEXT:    srl %s36, %s35, 32
; CHECK-NEXT:    or %s37, 0, %s36
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    sll %s36, %s36, 32
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s35, %s35, (32)0
; CHECK-NEXT:    # kill: def $sw35 killed $sw35 killed $sx35
; CHECK-NEXT:    adds.w.zx %s36, %s35, (0)1
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s7, %s7, %s34
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    and %s7, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    srl %s5, %s5, 32
; CHECK-NEXT:    or %s34, 0, %s5
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s34
; CHECK-NEXT:    sll %s5, %s5, 32
; CHECK-NEXT:    or %s5, %s3, %s5
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s0)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s5, %s5, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s4, %v0(%s4)
; CHECK-NEXT:    and %s5, %s4, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    srl %s4, %s4, 32
; CHECK-NEXT:    or %s6, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s6
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s4, %s3, %s4
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)0
; CHECK-NEXT:    or %s5, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s5
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s3, %s3, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s3
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lvl %s2
; CHECK-NEXT:    vcmps.w.zx %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    mins.w.sx %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    ld %s33, 2008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s32, 2000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s31, 1992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s30, 1984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s29, 1976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s28, 1968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s27, 1960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s26, 1952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s25, 1944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s24, 1936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s23, 1928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s22, 1920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s21, 1912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s20, 1904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s19, 1896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s18, 1888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s10, 8(, %s11)
; CHECK-NEXT:    ld %s9, (, %s11)
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.smin.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_smax(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_reduce_smax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    adds.w.sx %s2, 1, %s1
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    srl %s1, %s1, 1
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vshf %v1, %v0, %v0, 0
; CHECK-NEXT:    vrmaxs.w.fst.sx %v1, %v1, %vm2
; CHECK-NEXT:    lvs %s2, %v1(0)
; CHECK-NEXT:    or %s2, 0, %s2
; CHECK-NEXT:    vrmaxs.w.fst.sx %v0, %v0, %vm3
; CHECK-NEXT:    lvs %s1, %v0(0)
; CHECK-NEXT:    or %s1, 0, %s1
; CHECK-NEXT:    maxs.w.sx %s1, %s1, %s2
; CHECK-NEXT:    maxs.w.sx %s1, %s0, %s1
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.smax.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_umin(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; TODO: map to smax
; CHECK-LABEL: test_reduce_umin:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (, %s11)
; CHECK-NEXT:    st %s10, 8(, %s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s11, -1840(, %s11)
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB18_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB18_2:
; CHECK-NEXT:    st %s18, 1888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s19, 1896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s20, 1904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s21, 1912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s22, 1920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s23, 1928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s24, 1936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s25, 1944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s26, 1952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s27, 1960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s28, 1968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s29, 1976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s30, 1984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s31, 1992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s32, 2000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s33, 2008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    andm %vm1, %vm0, %vm2
; CHECK-NEXT:    andm %vm4, %vm0, %vm3
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    or %s3, 0, %s0
; CHECK-NEXT:    or %s0, -1, (0)1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    sll %s1, %s0, 32
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    or %s0, %s0, %s1
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v1, %s0
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    and %s2, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw2 killed $sw2 killed $sx2
; CHECK-NEXT:    adds.w.zx %s2, %s2, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s2
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s2
; CHECK-NEXT:    sll %s4, %s0, 32
; CHECK-NEXT:    or %s0, 0, (0)1
; CHECK-NEXT:    st %s0, 1832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lvs %s2, %v0(%s0)
; CHECK-NEXT:    and %s2, %s2, (32)0
; CHECK-NEXT:    or %s4, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v0(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    or %s4, 1, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s5, 129
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    srl %s6, %s5, 32
; CHECK-NEXT:    or %s7, 0, %s6
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    sll %s6, %s6, 32
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    or %s0, %s0, %s5
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    or %s5, 2, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s6, 130
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    or %s6, 3, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s7, 131
; CHECK-NEXT:    lvs %s7, %v1(%s7)
; CHECK-NEXT:    srl %s34, %s7, 32
; CHECK-NEXT:    or %s35, 0, %s34
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    sll %s34, %s34, 32
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    or %s7, 4, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 132
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    or %s36, 5, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 133
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s37, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s37
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    or %s35, 6, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 134
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s37, %s34, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s37, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s37
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    or %s34, 7, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s37, 135
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    srl %s38, %s37, 32
; CHECK-NEXT:    or %s39, 0, %s38
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    sll %s38, %s38, 32
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    or %s37, 8, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 136
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    or %s44, 9, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 137
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    or %s43, 10, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 138
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    or %s42, 11, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 139
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    or %s41, 12, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 140
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    or %s40, 13, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 141
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s45, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s45
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    or %s39, 14, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 142
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s45, %s38, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s45, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s45
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    or %s38, 15, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s45, 143
; CHECK-NEXT:    lvs %s45, %v1(%s45)
; CHECK-NEXT:    srl %s46, %s45, 32
; CHECK-NEXT:    or %s47, 0, %s46
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    sll %s46, %s46, 32
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    or %s45, 16, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 144
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    or %s60, 17, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 145
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    or %s59, 18, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 146
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    or %s58, 19, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 147
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    or %s57, 20, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 148
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    or %s56, 21, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 149
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    or %s55, 22, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 150
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    or %s54, 23, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 151
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    or %s53, 24, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 152
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    or %s52, 25, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 153
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    or %s51, 26, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 154
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    or %s50, 27, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 155
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    or %s49, 28, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 156
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    or %s48, 29, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 157
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s61, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s61
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    or %s47, 30, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 158
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s61, %s46, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s61, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s61
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    or %s46, 31, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s61, 159
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    srl %s62, %s61, 32
; CHECK-NEXT:    or %s63, 0, %s62
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    sll %s62, %s62, 32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    or %s61, 32, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 160
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    or %s0, 33, (0)1
; CHECK-NEXT:    st %s0, 1712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 161
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 34, (0)1
; CHECK-NEXT:    st %s0, 1720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 162
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 35, (0)1
; CHECK-NEXT:    st %s0, 1728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 163
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 36, (0)1
; CHECK-NEXT:    st %s0, 1736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 164
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 37, (0)1
; CHECK-NEXT:    st %s0, 1744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 165
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 38, (0)1
; CHECK-NEXT:    st %s0, 1752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 166
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 39, (0)1
; CHECK-NEXT:    st %s0, 1760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 167
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 40, (0)1
; CHECK-NEXT:    st %s0, 1768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 168
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 41, (0)1
; CHECK-NEXT:    st %s0, 1776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 169
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 42, (0)1
; CHECK-NEXT:    st %s0, 1784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 170
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 43, (0)1
; CHECK-NEXT:    st %s0, 1792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 171
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 44, (0)1
; CHECK-NEXT:    st %s0, 1800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 172
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 45, (0)1
; CHECK-NEXT:    st %s0, 1808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 173
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 46, (0)1
; CHECK-NEXT:    st %s0, 1816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 174
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 47, (0)1
; CHECK-NEXT:    st %s0, 1824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 175
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s31, 48, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 176
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    or %s30, 49, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 177
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    or %s29, 50, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 178
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    or %s28, 51, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 179
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    or %s27, 52, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 180
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    or %s26, 53, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 181
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    or %s25, 54, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 182
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    or %s24, 55, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 183
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    or %s23, 56, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 184
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    or %s22, 57, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 185
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    or %s21, 58, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 186
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    or %s20, 59, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 187
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    or %s19, 60, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 188
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    or %s18, 61, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 189
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s32, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s32
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    or %s63, 62, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 190
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s32, %s62, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s32, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    or %s62, 63, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    st %s0, 176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lea %s0, 191
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s0, %s0, %s33
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lea %s0, 64
; CHECK-NEXT:    st %s0, 696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 192
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 65
; CHECK-NEXT:    st %s0, 704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 193
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 66
; CHECK-NEXT:    st %s0, 720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 194
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 67
; CHECK-NEXT:    st %s0, 736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 195
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 68
; CHECK-NEXT:    st %s0, 752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 196
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 69
; CHECK-NEXT:    st %s0, 768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 197
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 70
; CHECK-NEXT:    st %s0, 784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 198
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 71
; CHECK-NEXT:    st %s0, 800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 199
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 72
; CHECK-NEXT:    st %s0, 816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 200
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 73
; CHECK-NEXT:    st %s0, 832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 201
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 74
; CHECK-NEXT:    st %s0, 848(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 202
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 75
; CHECK-NEXT:    st %s0, 864(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 203
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 76
; CHECK-NEXT:    st %s0, 880(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 204
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 77
; CHECK-NEXT:    st %s0, 896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 205
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 78
; CHECK-NEXT:    st %s0, 912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 206
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 79
; CHECK-NEXT:    st %s0, 928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 207
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 80
; CHECK-NEXT:    st %s0, 944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 208
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 81
; CHECK-NEXT:    st %s0, 960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 209
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 82
; CHECK-NEXT:    st %s0, 976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 210
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 83
; CHECK-NEXT:    st %s0, 992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 211
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 84
; CHECK-NEXT:    st %s0, 1008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 212
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 85
; CHECK-NEXT:    st %s0, 1024(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 213
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 86
; CHECK-NEXT:    st %s0, 1040(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 214
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 87
; CHECK-NEXT:    st %s0, 1056(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 215
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 88
; CHECK-NEXT:    st %s0, 1072(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 216
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 89
; CHECK-NEXT:    st %s0, 1088(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 217
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 90
; CHECK-NEXT:    st %s0, 1104(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 218
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 91
; CHECK-NEXT:    st %s0, 1120(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 219
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 92
; CHECK-NEXT:    st %s0, 1136(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 220
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 93
; CHECK-NEXT:    st %s0, 1152(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 221
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 94
; CHECK-NEXT:    st %s0, 1168(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 222
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 95
; CHECK-NEXT:    st %s0, 1184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 223
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 96
; CHECK-NEXT:    st %s0, 1200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 224
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 97
; CHECK-NEXT:    st %s0, 1216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 225
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 98
; CHECK-NEXT:    st %s0, 1232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 226
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 99
; CHECK-NEXT:    st %s0, 1248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 227
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 100
; CHECK-NEXT:    st %s0, 1264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 228
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 101
; CHECK-NEXT:    st %s0, 1280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 229
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 102
; CHECK-NEXT:    st %s0, 1296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 230
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 103
; CHECK-NEXT:    st %s0, 1312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 231
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 104
; CHECK-NEXT:    st %s0, 1328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 232
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 105
; CHECK-NEXT:    st %s0, 1344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 233
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 106
; CHECK-NEXT:    st %s0, 1360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 234
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 107
; CHECK-NEXT:    st %s0, 1376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 235
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 108
; CHECK-NEXT:    st %s0, 1392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 236
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 109
; CHECK-NEXT:    st %s0, 1408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 237
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 110
; CHECK-NEXT:    st %s0, 1424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 238
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 111
; CHECK-NEXT:    st %s0, 1440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 239
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 112
; CHECK-NEXT:    st %s0, 1456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 240
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 113
; CHECK-NEXT:    st %s0, 1472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 241
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 114
; CHECK-NEXT:    st %s0, 1488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 242
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 115
; CHECK-NEXT:    st %s0, 1504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 243
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 116
; CHECK-NEXT:    st %s0, 1520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 244
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 117
; CHECK-NEXT:    st %s0, 1536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 245
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 118
; CHECK-NEXT:    st %s0, 1552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 246
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 119
; CHECK-NEXT:    st %s0, 1568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 247
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 120
; CHECK-NEXT:    st %s0, 1584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 248
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 121
; CHECK-NEXT:    st %s0, 1600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 249
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 122
; CHECK-NEXT:    st %s0, 1616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 250
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 123
; CHECK-NEXT:    st %s0, 1632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 251
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 124
; CHECK-NEXT:    st %s0, 1648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 252
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 125
; CHECK-NEXT:    st %s0, 1664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 253
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 126
; CHECK-NEXT:    st %s0, 1680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 254
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 127
; CHECK-NEXT:    st %s0, 1696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 255
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s32, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s33
; CHECK-NEXT:    ld %s33, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s2, %s0
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s33), %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s33, %v1(%s33)
; CHECK-NEXT:    and %s33, %s33, (32)1
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 840(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 840(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 856(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 856(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 872(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 872(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1016(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1016(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1032(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1032(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1048(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1048(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1064(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1064(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1080(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1080(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1096(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1096(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1112(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1112(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1128(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1128(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1144(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1144(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1160(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1160(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s61), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    and %s32, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s32, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    srl %s61, %s61, 32
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s61
; CHECK-NEXT:    ld %s61, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s32, %s2, %s32
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v0(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s31, %v1(%s31)
; CHECK-NEXT:    srl %s32, %s31, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s31, %s31, (32)0
; CHECK-NEXT:    # kill: def $sw31 killed $sw31 killed $sx31
; CHECK-NEXT:    adds.w.zx %s32, %s31, (0)1
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s30, %v1(%s30)
; CHECK-NEXT:    srl %s31, %s30, 32
; CHECK-NEXT:    or %s32, 0, %s31
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    sll %s31, %s31, 32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s30, %s30, (32)0
; CHECK-NEXT:    # kill: def $sw30 killed $sw30 killed $sx30
; CHECK-NEXT:    adds.w.zx %s31, %s30, (0)1
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s29, %v1(%s29)
; CHECK-NEXT:    srl %s30, %s29, 32
; CHECK-NEXT:    or %s31, 0, %s30
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    sll %s30, %s30, 32
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s29, %s29, (32)0
; CHECK-NEXT:    # kill: def $sw29 killed $sw29 killed $sx29
; CHECK-NEXT:    adds.w.zx %s30, %s29, (0)1
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s28, %v1(%s28)
; CHECK-NEXT:    srl %s29, %s28, 32
; CHECK-NEXT:    or %s30, 0, %s29
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    sll %s29, %s29, 32
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s28, %s28, (32)0
; CHECK-NEXT:    # kill: def $sw28 killed $sw28 killed $sx28
; CHECK-NEXT:    adds.w.zx %s29, %s28, (0)1
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s27, %v1(%s27)
; CHECK-NEXT:    srl %s28, %s27, 32
; CHECK-NEXT:    or %s29, 0, %s28
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    sll %s28, %s28, 32
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s27, %s27, (32)0
; CHECK-NEXT:    # kill: def $sw27 killed $sw27 killed $sx27
; CHECK-NEXT:    adds.w.zx %s28, %s27, (0)1
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s26, %v1(%s26)
; CHECK-NEXT:    srl %s27, %s26, 32
; CHECK-NEXT:    or %s28, 0, %s27
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    sll %s27, %s27, 32
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s26, %s26, (32)0
; CHECK-NEXT:    # kill: def $sw26 killed $sw26 killed $sx26
; CHECK-NEXT:    adds.w.zx %s27, %s26, (0)1
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s25, %v1(%s25)
; CHECK-NEXT:    srl %s26, %s25, 32
; CHECK-NEXT:    or %s27, 0, %s26
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    sll %s26, %s26, 32
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s25, %s25, (32)0
; CHECK-NEXT:    # kill: def $sw25 killed $sw25 killed $sx25
; CHECK-NEXT:    adds.w.zx %s26, %s25, (0)1
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s24, %v1(%s24)
; CHECK-NEXT:    srl %s25, %s24, 32
; CHECK-NEXT:    or %s26, 0, %s25
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    sll %s25, %s25, 32
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s24, %s24, (32)0
; CHECK-NEXT:    # kill: def $sw24 killed $sw24 killed $sx24
; CHECK-NEXT:    adds.w.zx %s25, %s24, (0)1
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s23, %v1(%s23)
; CHECK-NEXT:    srl %s24, %s23, 32
; CHECK-NEXT:    or %s25, 0, %s24
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    sll %s24, %s24, 32
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s23, %s23, (32)0
; CHECK-NEXT:    # kill: def $sw23 killed $sw23 killed $sx23
; CHECK-NEXT:    adds.w.zx %s24, %s23, (0)1
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s22, %v1(%s22)
; CHECK-NEXT:    srl %s23, %s22, 32
; CHECK-NEXT:    or %s24, 0, %s23
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    sll %s23, %s23, 32
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s22, %s22, (32)0
; CHECK-NEXT:    # kill: def $sw22 killed $sw22 killed $sx22
; CHECK-NEXT:    adds.w.zx %s23, %s22, (0)1
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s21, %v1(%s21)
; CHECK-NEXT:    srl %s22, %s21, 32
; CHECK-NEXT:    or %s23, 0, %s22
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    sll %s22, %s22, 32
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s21, %s21, (32)0
; CHECK-NEXT:    # kill: def $sw21 killed $sw21 killed $sx21
; CHECK-NEXT:    adds.w.zx %s22, %s21, (0)1
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s20, %v1(%s20)
; CHECK-NEXT:    srl %s21, %s20, 32
; CHECK-NEXT:    or %s22, 0, %s21
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    sll %s21, %s21, 32
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s20, %s20, (32)0
; CHECK-NEXT:    # kill: def $sw20 killed $sw20 killed $sx20
; CHECK-NEXT:    adds.w.zx %s21, %s20, (0)1
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s19, %v1(%s19)
; CHECK-NEXT:    srl %s20, %s19, 32
; CHECK-NEXT:    or %s21, 0, %s20
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    sll %s20, %s20, 32
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s19, %s19, (32)0
; CHECK-NEXT:    # kill: def $sw19 killed $sw19 killed $sx19
; CHECK-NEXT:    adds.w.zx %s20, %s19, (0)1
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s18, %v1(%s18)
; CHECK-NEXT:    srl %s19, %s18, 32
; CHECK-NEXT:    or %s20, 0, %s19
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    sll %s19, %s19, 32
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s18, %s18, (32)0
; CHECK-NEXT:    # kill: def $sw18 killed $sw18 killed $sx18
; CHECK-NEXT:    adds.w.zx %s19, %s18, (0)1
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s61, %s61, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s45, %v0(%s45)
; CHECK-NEXT:    and %s61, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    srl %s45, %s45, 32
; CHECK-NEXT:    or %s62, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s62
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s45, %s2, %s45
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s0)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s60, %v0(%s60)
; CHECK-NEXT:    srl %s61, %s60, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s60, %s60, (32)0
; CHECK-NEXT:    # kill: def $sw60 killed $sw60 killed $sx60
; CHECK-NEXT:    adds.w.zx %s61, %s60, (0)1
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s59, %v0(%s59)
; CHECK-NEXT:    srl %s60, %s59, 32
; CHECK-NEXT:    or %s61, 0, %s60
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    sll %s60, %s60, 32
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s59, %s59, (32)0
; CHECK-NEXT:    # kill: def $sw59 killed $sw59 killed $sx59
; CHECK-NEXT:    adds.w.zx %s60, %s59, (0)1
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s58, %v0(%s58)
; CHECK-NEXT:    srl %s59, %s58, 32
; CHECK-NEXT:    or %s60, 0, %s59
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    sll %s59, %s59, 32
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s58, %s58, (32)0
; CHECK-NEXT:    # kill: def $sw58 killed $sw58 killed $sx58
; CHECK-NEXT:    adds.w.zx %s59, %s58, (0)1
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s57, %v0(%s57)
; CHECK-NEXT:    srl %s58, %s57, 32
; CHECK-NEXT:    or %s59, 0, %s58
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    sll %s58, %s58, 32
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s57, %s57, (32)0
; CHECK-NEXT:    # kill: def $sw57 killed $sw57 killed $sx57
; CHECK-NEXT:    adds.w.zx %s58, %s57, (0)1
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s56, %v0(%s56)
; CHECK-NEXT:    srl %s57, %s56, 32
; CHECK-NEXT:    or %s58, 0, %s57
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    sll %s57, %s57, 32
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s56, %s56, (32)0
; CHECK-NEXT:    # kill: def $sw56 killed $sw56 killed $sx56
; CHECK-NEXT:    adds.w.zx %s57, %s56, (0)1
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s55, %v0(%s55)
; CHECK-NEXT:    srl %s56, %s55, 32
; CHECK-NEXT:    or %s57, 0, %s56
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    sll %s56, %s56, 32
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s55, %s55, (32)0
; CHECK-NEXT:    # kill: def $sw55 killed $sw55 killed $sx55
; CHECK-NEXT:    adds.w.zx %s56, %s55, (0)1
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s54, %v0(%s54)
; CHECK-NEXT:    srl %s55, %s54, 32
; CHECK-NEXT:    or %s56, 0, %s55
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    sll %s55, %s55, 32
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s54, %s54, (32)0
; CHECK-NEXT:    # kill: def $sw54 killed $sw54 killed $sx54
; CHECK-NEXT:    adds.w.zx %s55, %s54, (0)1
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s53, %v0(%s53)
; CHECK-NEXT:    srl %s54, %s53, 32
; CHECK-NEXT:    or %s55, 0, %s54
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    sll %s54, %s54, 32
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s53, %s53, (32)0
; CHECK-NEXT:    # kill: def $sw53 killed $sw53 killed $sx53
; CHECK-NEXT:    adds.w.zx %s54, %s53, (0)1
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s52, %v0(%s52)
; CHECK-NEXT:    srl %s53, %s52, 32
; CHECK-NEXT:    or %s54, 0, %s53
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    sll %s53, %s53, 32
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s52, %s52, (32)0
; CHECK-NEXT:    # kill: def $sw52 killed $sw52 killed $sx52
; CHECK-NEXT:    adds.w.zx %s53, %s52, (0)1
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s51, %v0(%s51)
; CHECK-NEXT:    srl %s52, %s51, 32
; CHECK-NEXT:    or %s53, 0, %s52
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    sll %s52, %s52, 32
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s51, %s51, (32)0
; CHECK-NEXT:    # kill: def $sw51 killed $sw51 killed $sx51
; CHECK-NEXT:    adds.w.zx %s52, %s51, (0)1
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s50, %v0(%s50)
; CHECK-NEXT:    srl %s51, %s50, 32
; CHECK-NEXT:    or %s52, 0, %s51
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    sll %s51, %s51, 32
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s50, %s50, (32)0
; CHECK-NEXT:    # kill: def $sw50 killed $sw50 killed $sx50
; CHECK-NEXT:    adds.w.zx %s51, %s50, (0)1
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s49, %v0(%s49)
; CHECK-NEXT:    srl %s50, %s49, 32
; CHECK-NEXT:    or %s51, 0, %s50
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    sll %s50, %s50, 32
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s49, %s49, (32)0
; CHECK-NEXT:    # kill: def $sw49 killed $sw49 killed $sx49
; CHECK-NEXT:    adds.w.zx %s50, %s49, (0)1
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s48, %v0(%s48)
; CHECK-NEXT:    srl %s49, %s48, 32
; CHECK-NEXT:    or %s50, 0, %s49
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    sll %s49, %s49, 32
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s48, %s48, (32)0
; CHECK-NEXT:    # kill: def $sw48 killed $sw48 killed $sx48
; CHECK-NEXT:    adds.w.zx %s49, %s48, (0)1
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s47, %v0(%s47)
; CHECK-NEXT:    srl %s48, %s47, 32
; CHECK-NEXT:    or %s49, 0, %s48
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    sll %s48, %s48, 32
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s47, %s47, (32)0
; CHECK-NEXT:    # kill: def $sw47 killed $sw47 killed $sx47
; CHECK-NEXT:    adds.w.zx %s48, %s47, (0)1
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s45, %s45, %s46
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    and %s45, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    srl %s37, %s37, 32
; CHECK-NEXT:    or %s46, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s46
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s37, %s2, %s37
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s0)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s44, %v1(%s44)
; CHECK-NEXT:    srl %s45, %s44, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s44, %s44, (32)0
; CHECK-NEXT:    # kill: def $sw44 killed $sw44 killed $sx44
; CHECK-NEXT:    adds.w.zx %s45, %s44, (0)1
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s43, %v1(%s43)
; CHECK-NEXT:    srl %s44, %s43, 32
; CHECK-NEXT:    or %s45, 0, %s44
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    sll %s44, %s44, 32
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s43, %s43, (32)0
; CHECK-NEXT:    # kill: def $sw43 killed $sw43 killed $sx43
; CHECK-NEXT:    adds.w.zx %s44, %s43, (0)1
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s42, %v1(%s42)
; CHECK-NEXT:    srl %s43, %s42, 32
; CHECK-NEXT:    or %s44, 0, %s43
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    sll %s43, %s43, 32
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s42, %s42, (32)0
; CHECK-NEXT:    # kill: def $sw42 killed $sw42 killed $sx42
; CHECK-NEXT:    adds.w.zx %s43, %s42, (0)1
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s41, %v1(%s41)
; CHECK-NEXT:    srl %s42, %s41, 32
; CHECK-NEXT:    or %s43, 0, %s42
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    sll %s42, %s42, 32
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s41, %s41, (32)0
; CHECK-NEXT:    # kill: def $sw41 killed $sw41 killed $sx41
; CHECK-NEXT:    adds.w.zx %s42, %s41, (0)1
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s40, %v1(%s40)
; CHECK-NEXT:    srl %s41, %s40, 32
; CHECK-NEXT:    or %s42, 0, %s41
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    sll %s41, %s41, 32
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s40, %s40, (32)0
; CHECK-NEXT:    # kill: def $sw40 killed $sw40 killed $sx40
; CHECK-NEXT:    adds.w.zx %s41, %s40, (0)1
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s39, %v1(%s39)
; CHECK-NEXT:    srl %s40, %s39, 32
; CHECK-NEXT:    or %s41, 0, %s40
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    sll %s40, %s40, 32
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s39, %s39, (32)0
; CHECK-NEXT:    # kill: def $sw39 killed $sw39 killed $sx39
; CHECK-NEXT:    adds.w.zx %s40, %s39, (0)1
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s37, %s37, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s7, %v0(%s7)
; CHECK-NEXT:    and %s37, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    srl %s7, %s7, 32
; CHECK-NEXT:    or %s38, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s38
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s7, %s2, %s7
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s0)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s36, %v0(%s36)
; CHECK-NEXT:    srl %s37, %s36, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s36, %s36, (32)0
; CHECK-NEXT:    # kill: def $sw36 killed $sw36 killed $sx36
; CHECK-NEXT:    adds.w.zx %s37, %s36, (0)1
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s35, %v0(%s35)
; CHECK-NEXT:    srl %s36, %s35, 32
; CHECK-NEXT:    or %s37, 0, %s36
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    sll %s36, %s36, 32
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s35, %s35, (32)0
; CHECK-NEXT:    # kill: def $sw35 killed $sw35 killed $sx35
; CHECK-NEXT:    adds.w.zx %s36, %s35, (0)1
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s7, %s7, %s34
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    and %s7, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    srl %s5, %s5, 32
; CHECK-NEXT:    or %s34, 0, %s5
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s34
; CHECK-NEXT:    sll %s5, %s5, 32
; CHECK-NEXT:    or %s5, %s2, %s5
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s0)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s5, %s5, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s4, %v0(%s4)
; CHECK-NEXT:    and %s5, %s4, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    srl %s4, %s4, 32
; CHECK-NEXT:    or %s6, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s6
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s4, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)0
; CHECK-NEXT:    or %s5, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s5
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s2, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s2
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.lt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    cmpu.w %s1, %s0, %s3
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s3
; CHECK-NEXT:    cmov.w.lt %s0, %s2, %s1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    ld %s33, 2008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s32, 2000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s31, 1992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s30, 1984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s29, 1976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s28, 1968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s27, 1960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s26, 1952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s25, 1944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s24, 1936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s23, 1928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s22, 1920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s21, 1912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s20, 1904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s19, 1896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s18, 1888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s10, 8(, %s11)
; CHECK-NEXT:    ld %s9, (, %s11)
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.umin.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

define fastcc i32 @test_reduce_umax(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n) {
; TODO: map to smax
; CHECK-LABEL: test_reduce_umax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (, %s11)
; CHECK-NEXT:    st %s10, 8(, %s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s11, -1840(, %s11)
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB19_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB19_2:
; CHECK-NEXT:    st %s18, 1888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s19, 1896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s20, 1904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s21, 1912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s22, 1920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s23, 1928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s24, 1936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s25, 1944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s26, 1952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s27, 1960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s28, 1968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s29, 1976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s30, 1984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s31, 1992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s32, 2000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s33, 2008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    andm %vm1, %vm0, %vm2
; CHECK-NEXT:    andm %vm4, %vm0, %vm3
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    or %s3, 0, %s0
; CHECK-NEXT:    or %s0, 0, (0)1
; CHECK-NEXT:    st %s0, 1832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx1
; CHECK-NEXT:    or %s1, 0, %s2
; CHECK-NEXT:    sll %s2, %s1, 32
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    or %s2, %s1, %s2
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v1, %s2
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lea %s2, 128
; CHECK-NEXT:    lvs %s2, %v1(%s2)
; CHECK-NEXT:    and %s4, %s2, (32)0
; CHECK-NEXT:    # kill: def $sw4 killed $sw4 killed $sx4
; CHECK-NEXT:    adds.w.zx %s4, %s4, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s4
; CHECK-NEXT:    srl %s2, %s2, 32
; CHECK-NEXT:    or %s4, 0, %s2
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s4
; CHECK-NEXT:    sll %s4, %s2, 32
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lvs %s2, %v0(%s0)
; CHECK-NEXT:    and %s2, %s2, (32)0
; CHECK-NEXT:    or %s4, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v0(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v0(%s0), %s4
; CHECK-NEXT:    or %s4, 1, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s5, 129
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    srl %s6, %s5, 32
; CHECK-NEXT:    or %s7, 0, %s6
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    sll %s6, %s6, 32
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s4)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    or %s0, %s0, %s5
; CHECK-NEXT:    lsv %v0(%s4), %s0
; CHECK-NEXT:    or %s5, 2, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s6, 130
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s5)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s0, %s0, %s6
; CHECK-NEXT:    lsv %v0(%s5), %s0
; CHECK-NEXT:    or %s6, 3, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s7, 131
; CHECK-NEXT:    lvs %s7, %v1(%s7)
; CHECK-NEXT:    srl %s34, %s7, 32
; CHECK-NEXT:    or %s35, 0, %s34
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    sll %s34, %s34, 32
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s6)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    or %s0, %s0, %s7
; CHECK-NEXT:    lsv %v0(%s6), %s0
; CHECK-NEXT:    or %s7, 4, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 132
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s7)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s7), %s0
; CHECK-NEXT:    or %s36, 5, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 133
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s37, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s37
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s0, %s0, %s35
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s36)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s36), %s0
; CHECK-NEXT:    or %s35, 6, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s34, 134
; CHECK-NEXT:    lvs %s34, %v1(%s34)
; CHECK-NEXT:    srl %s37, %s34, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s35)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s37, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s37
; CHECK-NEXT:    or %s0, %s0, %s34
; CHECK-NEXT:    lsv %v0(%s35), %s0
; CHECK-NEXT:    or %s34, 7, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s37, 135
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    srl %s38, %s37, 32
; CHECK-NEXT:    or %s39, 0, %s38
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    sll %s38, %s38, 32
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s34)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    or %s0, %s0, %s37
; CHECK-NEXT:    lsv %v0(%s34), %s0
; CHECK-NEXT:    or %s37, 8, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 136
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s37)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s37), %s0
; CHECK-NEXT:    or %s44, 9, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 137
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s44)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s44), %s0
; CHECK-NEXT:    or %s43, 10, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 138
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s43)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s43), %s0
; CHECK-NEXT:    or %s42, 11, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 139
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s42)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s42), %s0
; CHECK-NEXT:    or %s41, 12, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 140
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s41)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s41), %s0
; CHECK-NEXT:    or %s40, 13, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 141
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s45, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s45
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s0, %s0, %s39
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s40)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s40), %s0
; CHECK-NEXT:    or %s39, 14, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s38, 142
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s45, %s38, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s39)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s45, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s45
; CHECK-NEXT:    or %s0, %s0, %s38
; CHECK-NEXT:    lsv %v0(%s39), %s0
; CHECK-NEXT:    or %s38, 15, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s45, 143
; CHECK-NEXT:    lvs %s45, %v1(%s45)
; CHECK-NEXT:    srl %s46, %s45, 32
; CHECK-NEXT:    or %s47, 0, %s46
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    sll %s46, %s46, 32
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s38)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    or %s0, %s0, %s45
; CHECK-NEXT:    lsv %v0(%s38), %s0
; CHECK-NEXT:    or %s45, 16, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 144
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s45)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s45), %s0
; CHECK-NEXT:    or %s60, 17, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 145
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s60)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s60), %s0
; CHECK-NEXT:    or %s59, 18, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 146
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s59)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s59), %s0
; CHECK-NEXT:    or %s58, 19, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 147
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s58)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s58), %s0
; CHECK-NEXT:    or %s57, 20, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 148
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s57)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s57), %s0
; CHECK-NEXT:    or %s56, 21, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 149
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s56)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s56), %s0
; CHECK-NEXT:    or %s55, 22, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 150
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s55)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s55), %s0
; CHECK-NEXT:    or %s54, 23, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 151
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s54)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s54), %s0
; CHECK-NEXT:    or %s53, 24, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 152
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s53)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s53), %s0
; CHECK-NEXT:    or %s52, 25, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 153
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s52)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s52), %s0
; CHECK-NEXT:    or %s51, 26, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 154
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s51)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s51), %s0
; CHECK-NEXT:    or %s50, 27, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 155
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s50)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s50), %s0
; CHECK-NEXT:    or %s49, 28, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 156
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s49)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s49), %s0
; CHECK-NEXT:    or %s48, 29, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 157
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s61, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s61
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s0, %s0, %s47
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s48)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s48), %s0
; CHECK-NEXT:    or %s47, 30, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s46, 158
; CHECK-NEXT:    lvs %s46, %v1(%s46)
; CHECK-NEXT:    srl %s61, %s46, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s47)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s61, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s61
; CHECK-NEXT:    or %s0, %s0, %s46
; CHECK-NEXT:    lsv %v0(%s47), %s0
; CHECK-NEXT:    or %s46, 31, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s61, 159
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    srl %s62, %s61, 32
; CHECK-NEXT:    or %s63, 0, %s62
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    sll %s62, %s62, 32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s46)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    or %s0, %s0, %s61
; CHECK-NEXT:    lsv %v0(%s46), %s0
; CHECK-NEXT:    or %s61, 32, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 160
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s61)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s61), %s0
; CHECK-NEXT:    or %s0, 33, (0)1
; CHECK-NEXT:    st %s0, 1712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 161
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 34, (0)1
; CHECK-NEXT:    st %s0, 1720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 162
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 35, (0)1
; CHECK-NEXT:    st %s0, 1728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 163
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 36, (0)1
; CHECK-NEXT:    st %s0, 1736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 164
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 37, (0)1
; CHECK-NEXT:    st %s0, 1744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 165
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 38, (0)1
; CHECK-NEXT:    st %s0, 1752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 166
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 39, (0)1
; CHECK-NEXT:    st %s0, 1760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 167
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 40, (0)1
; CHECK-NEXT:    st %s0, 1768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 168
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 41, (0)1
; CHECK-NEXT:    st %s0, 1776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 169
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 42, (0)1
; CHECK-NEXT:    st %s0, 1784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 170
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 43, (0)1
; CHECK-NEXT:    st %s0, 1792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 171
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 44, (0)1
; CHECK-NEXT:    st %s0, 1800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 172
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 45, (0)1
; CHECK-NEXT:    st %s0, 1808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 173
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 46, (0)1
; CHECK-NEXT:    st %s0, 1816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 174
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s0, 47, (0)1
; CHECK-NEXT:    st %s0, 1824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    lea %s63, 175
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s62, %s62, %s18
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    lvs %s62, %v0(%s0)
; CHECK-NEXT:    and %s62, %s62, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s62, %s62, %s63
; CHECK-NEXT:    lsv %v0(%s0), %s62
; CHECK-NEXT:    or %s31, 48, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 176
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s31)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s31), %s0
; CHECK-NEXT:    or %s30, 49, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 177
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s30)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s30), %s0
; CHECK-NEXT:    or %s29, 50, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 178
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s29)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s29), %s0
; CHECK-NEXT:    or %s28, 51, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 179
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s28)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s28), %s0
; CHECK-NEXT:    or %s27, 52, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 180
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s27)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s27), %s0
; CHECK-NEXT:    or %s26, 53, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 181
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s26)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s26), %s0
; CHECK-NEXT:    or %s25, 54, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 182
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s25)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s25), %s0
; CHECK-NEXT:    or %s24, 55, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 183
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s24)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s24), %s0
; CHECK-NEXT:    or %s23, 56, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 184
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s23)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s23), %s0
; CHECK-NEXT:    or %s22, 57, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 185
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s22)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s22), %s0
; CHECK-NEXT:    or %s21, 58, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 186
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s21)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s21), %s0
; CHECK-NEXT:    or %s20, 59, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 187
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s20)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s20), %s0
; CHECK-NEXT:    or %s19, 60, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 188
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s19)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s19), %s0
; CHECK-NEXT:    or %s18, 61, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 189
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s32, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s32
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s0, %s0, %s63
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s18)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s18), %s0
; CHECK-NEXT:    or %s63, 62, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lea %s62, 190
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s32, %s62, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s63)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s32, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s32
; CHECK-NEXT:    or %s0, %s0, %s62
; CHECK-NEXT:    lsv %v0(%s63), %s0
; CHECK-NEXT:    or %s62, 63, (0)1
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    st %s0, 176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lea %s0, 191
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s0, %s0, %s33
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lvs %s0, %v0(%s62)
; CHECK-NEXT:    and %s0, %s0, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s0, %s0, %s32
; CHECK-NEXT:    lsv %v0(%s62), %s0
; CHECK-NEXT:    lea %s0, 64
; CHECK-NEXT:    st %s0, 696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 192
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 65
; CHECK-NEXT:    st %s0, 704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 193
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 66
; CHECK-NEXT:    st %s0, 720(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 194
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 67
; CHECK-NEXT:    st %s0, 736(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 195
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 68
; CHECK-NEXT:    st %s0, 752(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 196
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 69
; CHECK-NEXT:    st %s0, 768(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 197
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 70
; CHECK-NEXT:    st %s0, 784(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 198
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 71
; CHECK-NEXT:    st %s0, 800(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 199
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 72
; CHECK-NEXT:    st %s0, 816(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 200
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 73
; CHECK-NEXT:    st %s0, 832(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 201
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 74
; CHECK-NEXT:    st %s0, 848(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 202
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 75
; CHECK-NEXT:    st %s0, 864(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 203
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 76
; CHECK-NEXT:    st %s0, 880(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 204
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 77
; CHECK-NEXT:    st %s0, 896(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 205
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 78
; CHECK-NEXT:    st %s0, 912(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 206
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 79
; CHECK-NEXT:    st %s0, 928(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 207
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 80
; CHECK-NEXT:    st %s0, 944(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 208
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 81
; CHECK-NEXT:    st %s0, 960(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 209
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 82
; CHECK-NEXT:    st %s0, 976(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 210
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 83
; CHECK-NEXT:    st %s0, 992(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 211
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 84
; CHECK-NEXT:    st %s0, 1008(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 212
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 85
; CHECK-NEXT:    st %s0, 1024(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 213
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 86
; CHECK-NEXT:    st %s0, 1040(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 214
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 87
; CHECK-NEXT:    st %s0, 1056(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 215
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 88
; CHECK-NEXT:    st %s0, 1072(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 216
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 89
; CHECK-NEXT:    st %s0, 1088(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 217
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 90
; CHECK-NEXT:    st %s0, 1104(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 218
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 91
; CHECK-NEXT:    st %s0, 1120(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 219
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 92
; CHECK-NEXT:    st %s0, 1136(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 220
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 93
; CHECK-NEXT:    st %s0, 1152(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 221
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 94
; CHECK-NEXT:    st %s0, 1168(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 222
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 95
; CHECK-NEXT:    st %s0, 1184(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 223
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 96
; CHECK-NEXT:    st %s0, 1200(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 224
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 97
; CHECK-NEXT:    st %s0, 1216(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 225
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 98
; CHECK-NEXT:    st %s0, 1232(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 226
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 99
; CHECK-NEXT:    st %s0, 1248(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 227
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 100
; CHECK-NEXT:    st %s0, 1264(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 228
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 101
; CHECK-NEXT:    st %s0, 1280(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 229
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 102
; CHECK-NEXT:    st %s0, 1296(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 230
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 103
; CHECK-NEXT:    st %s0, 1312(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 231
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 104
; CHECK-NEXT:    st %s0, 1328(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 232
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 105
; CHECK-NEXT:    st %s0, 1344(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 233
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 106
; CHECK-NEXT:    st %s0, 1360(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 234
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 107
; CHECK-NEXT:    st %s0, 1376(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 235
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 108
; CHECK-NEXT:    st %s0, 1392(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 236
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 109
; CHECK-NEXT:    st %s0, 1408(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 237
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 110
; CHECK-NEXT:    st %s0, 1424(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 238
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 111
; CHECK-NEXT:    st %s0, 1440(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 239
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 112
; CHECK-NEXT:    st %s0, 1456(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 240
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 113
; CHECK-NEXT:    st %s0, 1472(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 241
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 114
; CHECK-NEXT:    st %s0, 1488(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 242
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 115
; CHECK-NEXT:    st %s0, 1504(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 243
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 116
; CHECK-NEXT:    st %s0, 1520(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 244
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 117
; CHECK-NEXT:    st %s0, 1536(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 245
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 118
; CHECK-NEXT:    st %s0, 1552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 246
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 119
; CHECK-NEXT:    st %s0, 1568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 247
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 120
; CHECK-NEXT:    st %s0, 1584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 248
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 121
; CHECK-NEXT:    st %s0, 1600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 249
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 122
; CHECK-NEXT:    st %s0, 1616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 250
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 123
; CHECK-NEXT:    st %s0, 1632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 251
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 124
; CHECK-NEXT:    st %s0, 1648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 252
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 125
; CHECK-NEXT:    st %s0, 1664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 253
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 126
; CHECK-NEXT:    st %s0, 1680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 254
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 680(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s0), %s32
; CHECK-NEXT:    lea %s0, 127
; CHECK-NEXT:    st %s0, 1696(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s33, %s0, (32)0
; CHECK-NEXT:    lea %s0, 255
; CHECK-NEXT:    lvs %s0, %v1(%s0)
; CHECK-NEXT:    st %s0, 688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v0(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v0(%s32), %s33
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    and %s32, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s33
; CHECK-NEXT:    ld %s33, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s0, %s0, 32
; CHECK-NEXT:    or %s0, %s2, %s0
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s33), %s0
; CHECK-NEXT:    ld %s0, 704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s33, %v1(%s33)
; CHECK-NEXT:    and %s33, %s33, (32)1
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 712(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s4)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s4), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 728(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s5)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s5), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 744(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s6)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s6), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 760(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s7)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s7), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 776(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s36)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s36), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 792(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s35)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s35), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 808(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s34)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s34), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 824(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s37)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s37), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 840(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 840(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s44)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 848(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s44), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 856(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 856(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s43)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 864(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s43), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 872(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 872(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s42)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 880(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s42), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 888(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s41)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s41), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 904(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s40)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s40), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 920(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s39)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s39), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 936(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s38)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s38), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 952(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s45)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s45), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 968(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s60)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s60), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 984(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s59)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s59), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1000(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s58)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s58), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1016(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1016(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s57)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1024(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s57), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1032(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1032(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s56)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1040(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s56), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1048(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1048(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s55)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1056(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s55), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1064(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1064(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s54)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1072(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s54), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1080(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1080(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s53)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1088(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s53), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1096(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1096(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s52)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1104(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s52), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1112(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1112(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s51)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1120(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s51), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1128(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1128(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s50)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1136(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s50), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1144(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1144(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s49)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1152(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s49), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1160(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1160(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s48)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1168(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s48), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1176(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1176(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s47)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1184(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s47), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1192(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1192(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s46)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1200(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s46), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1208(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1208(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s61)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1216(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s61), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1224(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1224(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1232(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1240(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1240(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1248(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1256(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1256(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1264(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1272(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1272(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1280(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1288(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1288(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1296(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1304(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1304(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1312(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1320(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1320(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1328(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1336(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1336(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1344(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1352(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1352(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1360(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1368(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1368(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1376(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1384(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1384(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1392(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1400(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1400(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1408(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1416(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1416(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1424(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1432(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1432(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1440(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    ld %s33, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s33), %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1448(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1448(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s32)
; CHECK-NEXT:    and %s33, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s0
; CHECK-NEXT:    ld %s0, 1456(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s33, %s33, %s32
; CHECK-NEXT:    ld %s32, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    lsv %v1(%s32), %s33
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1464(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1464(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s31)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1472(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s31), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1480(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1480(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s30)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1488(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s30), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1496(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1496(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s29)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1504(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s29), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1512(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1512(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s28)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1520(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s28), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1528(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1528(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s27)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1536(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s27), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s26)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s26), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s25)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s25), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s24)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s24), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s23)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s23), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s22)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s22), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s21)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s21), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s20)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s20), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s19)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s19), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1672(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1672(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s18)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1680(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s18), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1688(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1688(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s63)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1696(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s63), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    st %s0, 1704(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1704(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    lvs %s32, %v1(%s62)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    adds.w.zx %s0, %s0, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1712(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v1(%s62), %s32
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s61, %v1(%s61)
; CHECK-NEXT:    and %s32, %s61, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s32, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    srl %s61, %s61, 32
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s61
; CHECK-NEXT:    ld %s61, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s32, %s2, %s32
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s32, %v0(%s61)
; CHECK-NEXT:    and %s32, %s32, (32)1
; CHECK-NEXT:    or %s32, %s32, %s33
; CHECK-NEXT:    lsv %v0(%s61), %s32
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1720(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s4)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s4), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1728(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s5)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s5), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1736(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s6)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s6), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1744(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s7)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s7), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1752(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s36)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s36), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1760(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s35)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s35), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1768(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s34)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s34), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1776(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s37)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s37), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1784(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s44)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s44), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1792(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s43)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s43), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1800(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s42)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s42), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1808(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s41)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s41), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1816(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s40)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s40), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1824(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s39)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s39), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s32, %v1(%s0)
; CHECK-NEXT:    srl %s0, %s32, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx33
; CHECK-NEXT:    or %s33, 0, %s0
; CHECK-NEXT:    ld %s0, 1832(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    sll %s33, %s33, 32
; CHECK-NEXT:    or %s61, %s61, %s33
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s38)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s32, %s32, (32)0
; CHECK-NEXT:    # kill: def $sw32 killed $sw32 killed $sx32
; CHECK-NEXT:    adds.w.zx %s33, %s32, (0)1
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s38), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s31, %v1(%s31)
; CHECK-NEXT:    srl %s32, %s31, 32
; CHECK-NEXT:    or %s33, 0, %s32
; CHECK-NEXT:    # implicit-def: $sx32
; CHECK-NEXT:    or %s32, 0, %s33
; CHECK-NEXT:    sll %s32, %s32, 32
; CHECK-NEXT:    or %s61, %s61, %s32
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s45)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s31, %s31, (32)0
; CHECK-NEXT:    # kill: def $sw31 killed $sw31 killed $sx31
; CHECK-NEXT:    adds.w.zx %s32, %s31, (0)1
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s45), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s30, %v1(%s30)
; CHECK-NEXT:    srl %s31, %s30, 32
; CHECK-NEXT:    or %s32, 0, %s31
; CHECK-NEXT:    # implicit-def: $sx31
; CHECK-NEXT:    or %s31, 0, %s32
; CHECK-NEXT:    sll %s31, %s31, 32
; CHECK-NEXT:    or %s61, %s61, %s31
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s60)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s30, %s30, (32)0
; CHECK-NEXT:    # kill: def $sw30 killed $sw30 killed $sx30
; CHECK-NEXT:    adds.w.zx %s31, %s30, (0)1
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s60), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s29, %v1(%s29)
; CHECK-NEXT:    srl %s30, %s29, 32
; CHECK-NEXT:    or %s31, 0, %s30
; CHECK-NEXT:    # implicit-def: $sx30
; CHECK-NEXT:    or %s30, 0, %s31
; CHECK-NEXT:    sll %s30, %s30, 32
; CHECK-NEXT:    or %s61, %s61, %s30
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s59)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s29, %s29, (32)0
; CHECK-NEXT:    # kill: def $sw29 killed $sw29 killed $sx29
; CHECK-NEXT:    adds.w.zx %s30, %s29, (0)1
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s59), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s28, %v1(%s28)
; CHECK-NEXT:    srl %s29, %s28, 32
; CHECK-NEXT:    or %s30, 0, %s29
; CHECK-NEXT:    # implicit-def: $sx29
; CHECK-NEXT:    or %s29, 0, %s30
; CHECK-NEXT:    sll %s29, %s29, 32
; CHECK-NEXT:    or %s61, %s61, %s29
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s58)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s28, %s28, (32)0
; CHECK-NEXT:    # kill: def $sw28 killed $sw28 killed $sx28
; CHECK-NEXT:    adds.w.zx %s29, %s28, (0)1
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s58), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s27, %v1(%s27)
; CHECK-NEXT:    srl %s28, %s27, 32
; CHECK-NEXT:    or %s29, 0, %s28
; CHECK-NEXT:    # implicit-def: $sx28
; CHECK-NEXT:    or %s28, 0, %s29
; CHECK-NEXT:    sll %s28, %s28, 32
; CHECK-NEXT:    or %s61, %s61, %s28
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s57)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s27, %s27, (32)0
; CHECK-NEXT:    # kill: def $sw27 killed $sw27 killed $sx27
; CHECK-NEXT:    adds.w.zx %s28, %s27, (0)1
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s57), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s26, %v1(%s26)
; CHECK-NEXT:    srl %s27, %s26, 32
; CHECK-NEXT:    or %s28, 0, %s27
; CHECK-NEXT:    # implicit-def: $sx27
; CHECK-NEXT:    or %s27, 0, %s28
; CHECK-NEXT:    sll %s27, %s27, 32
; CHECK-NEXT:    or %s61, %s61, %s27
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s56)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s26, %s26, (32)0
; CHECK-NEXT:    # kill: def $sw26 killed $sw26 killed $sx26
; CHECK-NEXT:    adds.w.zx %s27, %s26, (0)1
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s56), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s25, %v1(%s25)
; CHECK-NEXT:    srl %s26, %s25, 32
; CHECK-NEXT:    or %s27, 0, %s26
; CHECK-NEXT:    # implicit-def: $sx26
; CHECK-NEXT:    or %s26, 0, %s27
; CHECK-NEXT:    sll %s26, %s26, 32
; CHECK-NEXT:    or %s61, %s61, %s26
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s55)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s25, %s25, (32)0
; CHECK-NEXT:    # kill: def $sw25 killed $sw25 killed $sx25
; CHECK-NEXT:    adds.w.zx %s26, %s25, (0)1
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s55), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s24, %v1(%s24)
; CHECK-NEXT:    srl %s25, %s24, 32
; CHECK-NEXT:    or %s26, 0, %s25
; CHECK-NEXT:    # implicit-def: $sx25
; CHECK-NEXT:    or %s25, 0, %s26
; CHECK-NEXT:    sll %s25, %s25, 32
; CHECK-NEXT:    or %s61, %s61, %s25
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s54)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s24, %s24, (32)0
; CHECK-NEXT:    # kill: def $sw24 killed $sw24 killed $sx24
; CHECK-NEXT:    adds.w.zx %s25, %s24, (0)1
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s54), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s23, %v1(%s23)
; CHECK-NEXT:    srl %s24, %s23, 32
; CHECK-NEXT:    or %s25, 0, %s24
; CHECK-NEXT:    # implicit-def: $sx24
; CHECK-NEXT:    or %s24, 0, %s25
; CHECK-NEXT:    sll %s24, %s24, 32
; CHECK-NEXT:    or %s61, %s61, %s24
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s53)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s23, %s23, (32)0
; CHECK-NEXT:    # kill: def $sw23 killed $sw23 killed $sx23
; CHECK-NEXT:    adds.w.zx %s24, %s23, (0)1
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s53), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s22, %v1(%s22)
; CHECK-NEXT:    srl %s23, %s22, 32
; CHECK-NEXT:    or %s24, 0, %s23
; CHECK-NEXT:    # implicit-def: $sx23
; CHECK-NEXT:    or %s23, 0, %s24
; CHECK-NEXT:    sll %s23, %s23, 32
; CHECK-NEXT:    or %s61, %s61, %s23
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s52)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s22, %s22, (32)0
; CHECK-NEXT:    # kill: def $sw22 killed $sw22 killed $sx22
; CHECK-NEXT:    adds.w.zx %s23, %s22, (0)1
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s52), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s21, %v1(%s21)
; CHECK-NEXT:    srl %s22, %s21, 32
; CHECK-NEXT:    or %s23, 0, %s22
; CHECK-NEXT:    # implicit-def: $sx22
; CHECK-NEXT:    or %s22, 0, %s23
; CHECK-NEXT:    sll %s22, %s22, 32
; CHECK-NEXT:    or %s61, %s61, %s22
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s51)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s21, %s21, (32)0
; CHECK-NEXT:    # kill: def $sw21 killed $sw21 killed $sx21
; CHECK-NEXT:    adds.w.zx %s22, %s21, (0)1
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s51), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s20, %v1(%s20)
; CHECK-NEXT:    srl %s21, %s20, 32
; CHECK-NEXT:    or %s22, 0, %s21
; CHECK-NEXT:    # implicit-def: $sx21
; CHECK-NEXT:    or %s21, 0, %s22
; CHECK-NEXT:    sll %s21, %s21, 32
; CHECK-NEXT:    or %s61, %s61, %s21
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s50)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s20, %s20, (32)0
; CHECK-NEXT:    # kill: def $sw20 killed $sw20 killed $sx20
; CHECK-NEXT:    adds.w.zx %s21, %s20, (0)1
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s50), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s19, %v1(%s19)
; CHECK-NEXT:    srl %s20, %s19, 32
; CHECK-NEXT:    or %s21, 0, %s20
; CHECK-NEXT:    # implicit-def: $sx20
; CHECK-NEXT:    or %s20, 0, %s21
; CHECK-NEXT:    sll %s20, %s20, 32
; CHECK-NEXT:    or %s61, %s61, %s20
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s49)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s19, %s19, (32)0
; CHECK-NEXT:    # kill: def $sw19 killed $sw19 killed $sx19
; CHECK-NEXT:    adds.w.zx %s20, %s19, (0)1
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s49), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s18, %v1(%s18)
; CHECK-NEXT:    srl %s19, %s18, 32
; CHECK-NEXT:    or %s20, 0, %s19
; CHECK-NEXT:    # implicit-def: $sx19
; CHECK-NEXT:    or %s19, 0, %s20
; CHECK-NEXT:    sll %s19, %s19, 32
; CHECK-NEXT:    or %s61, %s61, %s19
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s48)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s18, %s18, (32)0
; CHECK-NEXT:    # kill: def $sw18 killed $sw18 killed $sx18
; CHECK-NEXT:    adds.w.zx %s19, %s18, (0)1
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s48), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s63, %v1(%s63)
; CHECK-NEXT:    srl %s18, %s63, 32
; CHECK-NEXT:    or %s19, 0, %s18
; CHECK-NEXT:    # implicit-def: $sx18
; CHECK-NEXT:    or %s18, 0, %s19
; CHECK-NEXT:    sll %s18, %s18, 32
; CHECK-NEXT:    or %s61, %s61, %s18
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s47)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s63, %s63, (32)0
; CHECK-NEXT:    # kill: def $sw63 killed $sw63 killed $sx63
; CHECK-NEXT:    adds.w.zx %s18, %s63, (0)1
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s47), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)0
; CHECK-NEXT:    lvs %s62, %v1(%s62)
; CHECK-NEXT:    srl %s63, %s62, 32
; CHECK-NEXT:    or %s18, 0, %s63
; CHECK-NEXT:    # implicit-def: $sx63
; CHECK-NEXT:    or %s63, 0, %s18
; CHECK-NEXT:    sll %s63, %s63, 32
; CHECK-NEXT:    or %s61, %s61, %s63
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    lvs %s61, %v0(%s46)
; CHECK-NEXT:    and %s61, %s61, (32)1
; CHECK-NEXT:    and %s62, %s62, (32)0
; CHECK-NEXT:    # kill: def $sw62 killed $sw62 killed $sx62
; CHECK-NEXT:    adds.w.zx %s63, %s62, (0)1
; CHECK-NEXT:    # implicit-def: $sx62
; CHECK-NEXT:    or %s62, 0, %s63
; CHECK-NEXT:    or %s61, %s61, %s62
; CHECK-NEXT:    lsv %v0(%s46), %s61
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s45, %v0(%s45)
; CHECK-NEXT:    and %s61, %s45, (32)0
; CHECK-NEXT:    # kill: def $sw61 killed $sw61 killed $sx61
; CHECK-NEXT:    adds.w.zx %s62, %s61, (0)1
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    srl %s45, %s45, 32
; CHECK-NEXT:    or %s62, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s62
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s45, %s2, %s45
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s0)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s0), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s60, %v0(%s60)
; CHECK-NEXT:    srl %s61, %s60, 32
; CHECK-NEXT:    or %s62, 0, %s61
; CHECK-NEXT:    # implicit-def: $sx61
; CHECK-NEXT:    or %s61, 0, %s62
; CHECK-NEXT:    sll %s61, %s61, 32
; CHECK-NEXT:    or %s45, %s45, %s61
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s4)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s60, %s60, (32)0
; CHECK-NEXT:    # kill: def $sw60 killed $sw60 killed $sx60
; CHECK-NEXT:    adds.w.zx %s61, %s60, (0)1
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s4), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s59, %v0(%s59)
; CHECK-NEXT:    srl %s60, %s59, 32
; CHECK-NEXT:    or %s61, 0, %s60
; CHECK-NEXT:    # implicit-def: $sx60
; CHECK-NEXT:    or %s60, 0, %s61
; CHECK-NEXT:    sll %s60, %s60, 32
; CHECK-NEXT:    or %s45, %s45, %s60
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s5)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s59, %s59, (32)0
; CHECK-NEXT:    # kill: def $sw59 killed $sw59 killed $sx59
; CHECK-NEXT:    adds.w.zx %s60, %s59, (0)1
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s5), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s58, %v0(%s58)
; CHECK-NEXT:    srl %s59, %s58, 32
; CHECK-NEXT:    or %s60, 0, %s59
; CHECK-NEXT:    # implicit-def: $sx59
; CHECK-NEXT:    or %s59, 0, %s60
; CHECK-NEXT:    sll %s59, %s59, 32
; CHECK-NEXT:    or %s45, %s45, %s59
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s6)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s58, %s58, (32)0
; CHECK-NEXT:    # kill: def $sw58 killed $sw58 killed $sx58
; CHECK-NEXT:    adds.w.zx %s59, %s58, (0)1
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s6), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s57, %v0(%s57)
; CHECK-NEXT:    srl %s58, %s57, 32
; CHECK-NEXT:    or %s59, 0, %s58
; CHECK-NEXT:    # implicit-def: $sx58
; CHECK-NEXT:    or %s58, 0, %s59
; CHECK-NEXT:    sll %s58, %s58, 32
; CHECK-NEXT:    or %s45, %s45, %s58
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s7)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s57, %s57, (32)0
; CHECK-NEXT:    # kill: def $sw57 killed $sw57 killed $sx57
; CHECK-NEXT:    adds.w.zx %s58, %s57, (0)1
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s7), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s56, %v0(%s56)
; CHECK-NEXT:    srl %s57, %s56, 32
; CHECK-NEXT:    or %s58, 0, %s57
; CHECK-NEXT:    # implicit-def: $sx57
; CHECK-NEXT:    or %s57, 0, %s58
; CHECK-NEXT:    sll %s57, %s57, 32
; CHECK-NEXT:    or %s45, %s45, %s57
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s36)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s56, %s56, (32)0
; CHECK-NEXT:    # kill: def $sw56 killed $sw56 killed $sx56
; CHECK-NEXT:    adds.w.zx %s57, %s56, (0)1
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s36), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s55, %v0(%s55)
; CHECK-NEXT:    srl %s56, %s55, 32
; CHECK-NEXT:    or %s57, 0, %s56
; CHECK-NEXT:    # implicit-def: $sx56
; CHECK-NEXT:    or %s56, 0, %s57
; CHECK-NEXT:    sll %s56, %s56, 32
; CHECK-NEXT:    or %s45, %s45, %s56
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s35)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s55, %s55, (32)0
; CHECK-NEXT:    # kill: def $sw55 killed $sw55 killed $sx55
; CHECK-NEXT:    adds.w.zx %s56, %s55, (0)1
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s35), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s54, %v0(%s54)
; CHECK-NEXT:    srl %s55, %s54, 32
; CHECK-NEXT:    or %s56, 0, %s55
; CHECK-NEXT:    # implicit-def: $sx55
; CHECK-NEXT:    or %s55, 0, %s56
; CHECK-NEXT:    sll %s55, %s55, 32
; CHECK-NEXT:    or %s45, %s45, %s55
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s34)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s54, %s54, (32)0
; CHECK-NEXT:    # kill: def $sw54 killed $sw54 killed $sx54
; CHECK-NEXT:    adds.w.zx %s55, %s54, (0)1
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s34), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s53, %v0(%s53)
; CHECK-NEXT:    srl %s54, %s53, 32
; CHECK-NEXT:    or %s55, 0, %s54
; CHECK-NEXT:    # implicit-def: $sx54
; CHECK-NEXT:    or %s54, 0, %s55
; CHECK-NEXT:    sll %s54, %s54, 32
; CHECK-NEXT:    or %s45, %s45, %s54
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s37)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s53, %s53, (32)0
; CHECK-NEXT:    # kill: def $sw53 killed $sw53 killed $sx53
; CHECK-NEXT:    adds.w.zx %s54, %s53, (0)1
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s37), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s52, %v0(%s52)
; CHECK-NEXT:    srl %s53, %s52, 32
; CHECK-NEXT:    or %s54, 0, %s53
; CHECK-NEXT:    # implicit-def: $sx53
; CHECK-NEXT:    or %s53, 0, %s54
; CHECK-NEXT:    sll %s53, %s53, 32
; CHECK-NEXT:    or %s45, %s45, %s53
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s44)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s52, %s52, (32)0
; CHECK-NEXT:    # kill: def $sw52 killed $sw52 killed $sx52
; CHECK-NEXT:    adds.w.zx %s53, %s52, (0)1
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s44), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s51, %v0(%s51)
; CHECK-NEXT:    srl %s52, %s51, 32
; CHECK-NEXT:    or %s53, 0, %s52
; CHECK-NEXT:    # implicit-def: $sx52
; CHECK-NEXT:    or %s52, 0, %s53
; CHECK-NEXT:    sll %s52, %s52, 32
; CHECK-NEXT:    or %s45, %s45, %s52
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s43)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s51, %s51, (32)0
; CHECK-NEXT:    # kill: def $sw51 killed $sw51 killed $sx51
; CHECK-NEXT:    adds.w.zx %s52, %s51, (0)1
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s43), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s50, %v0(%s50)
; CHECK-NEXT:    srl %s51, %s50, 32
; CHECK-NEXT:    or %s52, 0, %s51
; CHECK-NEXT:    # implicit-def: $sx51
; CHECK-NEXT:    or %s51, 0, %s52
; CHECK-NEXT:    sll %s51, %s51, 32
; CHECK-NEXT:    or %s45, %s45, %s51
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s42)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s50, %s50, (32)0
; CHECK-NEXT:    # kill: def $sw50 killed $sw50 killed $sx50
; CHECK-NEXT:    adds.w.zx %s51, %s50, (0)1
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s42), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s49, %v0(%s49)
; CHECK-NEXT:    srl %s50, %s49, 32
; CHECK-NEXT:    or %s51, 0, %s50
; CHECK-NEXT:    # implicit-def: $sx50
; CHECK-NEXT:    or %s50, 0, %s51
; CHECK-NEXT:    sll %s50, %s50, 32
; CHECK-NEXT:    or %s45, %s45, %s50
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s41)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s49, %s49, (32)0
; CHECK-NEXT:    # kill: def $sw49 killed $sw49 killed $sx49
; CHECK-NEXT:    adds.w.zx %s50, %s49, (0)1
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s41), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s48, %v0(%s48)
; CHECK-NEXT:    srl %s49, %s48, 32
; CHECK-NEXT:    or %s50, 0, %s49
; CHECK-NEXT:    # implicit-def: $sx49
; CHECK-NEXT:    or %s49, 0, %s50
; CHECK-NEXT:    sll %s49, %s49, 32
; CHECK-NEXT:    or %s45, %s45, %s49
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s40)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s48, %s48, (32)0
; CHECK-NEXT:    # kill: def $sw48 killed $sw48 killed $sx48
; CHECK-NEXT:    adds.w.zx %s49, %s48, (0)1
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s40), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s47, %v0(%s47)
; CHECK-NEXT:    srl %s48, %s47, 32
; CHECK-NEXT:    or %s49, 0, %s48
; CHECK-NEXT:    # implicit-def: $sx48
; CHECK-NEXT:    or %s48, 0, %s49
; CHECK-NEXT:    sll %s48, %s48, 32
; CHECK-NEXT:    or %s45, %s45, %s48
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s39)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s47, %s47, (32)0
; CHECK-NEXT:    # kill: def $sw47 killed $sw47 killed $sx47
; CHECK-NEXT:    adds.w.zx %s48, %s47, (0)1
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s39), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)0
; CHECK-NEXT:    lvs %s46, %v0(%s46)
; CHECK-NEXT:    srl %s47, %s46, 32
; CHECK-NEXT:    or %s48, 0, %s47
; CHECK-NEXT:    # implicit-def: $sx47
; CHECK-NEXT:    or %s47, 0, %s48
; CHECK-NEXT:    sll %s47, %s47, 32
; CHECK-NEXT:    or %s45, %s45, %s47
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    lvs %s45, %v1(%s38)
; CHECK-NEXT:    and %s45, %s45, (32)1
; CHECK-NEXT:    and %s46, %s46, (32)0
; CHECK-NEXT:    # kill: def $sw46 killed $sw46 killed $sx46
; CHECK-NEXT:    adds.w.zx %s47, %s46, (0)1
; CHECK-NEXT:    # implicit-def: $sx46
; CHECK-NEXT:    or %s46, 0, %s47
; CHECK-NEXT:    or %s45, %s45, %s46
; CHECK-NEXT:    lsv %v1(%s38), %s45
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s37, %v1(%s37)
; CHECK-NEXT:    and %s45, %s37, (32)0
; CHECK-NEXT:    # kill: def $sw45 killed $sw45 killed $sx45
; CHECK-NEXT:    adds.w.zx %s46, %s45, (0)1
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    srl %s37, %s37, 32
; CHECK-NEXT:    or %s46, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s46
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s37, %s2, %s37
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s0)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s0), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s44, %v1(%s44)
; CHECK-NEXT:    srl %s45, %s44, 32
; CHECK-NEXT:    or %s46, 0, %s45
; CHECK-NEXT:    # implicit-def: $sx45
; CHECK-NEXT:    or %s45, 0, %s46
; CHECK-NEXT:    sll %s45, %s45, 32
; CHECK-NEXT:    or %s37, %s37, %s45
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s4)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s44, %s44, (32)0
; CHECK-NEXT:    # kill: def $sw44 killed $sw44 killed $sx44
; CHECK-NEXT:    adds.w.zx %s45, %s44, (0)1
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s4), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s43, %v1(%s43)
; CHECK-NEXT:    srl %s44, %s43, 32
; CHECK-NEXT:    or %s45, 0, %s44
; CHECK-NEXT:    # implicit-def: $sx44
; CHECK-NEXT:    or %s44, 0, %s45
; CHECK-NEXT:    sll %s44, %s44, 32
; CHECK-NEXT:    or %s37, %s37, %s44
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s5)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s43, %s43, (32)0
; CHECK-NEXT:    # kill: def $sw43 killed $sw43 killed $sx43
; CHECK-NEXT:    adds.w.zx %s44, %s43, (0)1
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s5), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s42, %v1(%s42)
; CHECK-NEXT:    srl %s43, %s42, 32
; CHECK-NEXT:    or %s44, 0, %s43
; CHECK-NEXT:    # implicit-def: $sx43
; CHECK-NEXT:    or %s43, 0, %s44
; CHECK-NEXT:    sll %s43, %s43, 32
; CHECK-NEXT:    or %s37, %s37, %s43
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s6)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s42, %s42, (32)0
; CHECK-NEXT:    # kill: def $sw42 killed $sw42 killed $sx42
; CHECK-NEXT:    adds.w.zx %s43, %s42, (0)1
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s6), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s41, %v1(%s41)
; CHECK-NEXT:    srl %s42, %s41, 32
; CHECK-NEXT:    or %s43, 0, %s42
; CHECK-NEXT:    # implicit-def: $sx42
; CHECK-NEXT:    or %s42, 0, %s43
; CHECK-NEXT:    sll %s42, %s42, 32
; CHECK-NEXT:    or %s37, %s37, %s42
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s7)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s41, %s41, (32)0
; CHECK-NEXT:    # kill: def $sw41 killed $sw41 killed $sx41
; CHECK-NEXT:    adds.w.zx %s42, %s41, (0)1
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s7), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s40, %v1(%s40)
; CHECK-NEXT:    srl %s41, %s40, 32
; CHECK-NEXT:    or %s42, 0, %s41
; CHECK-NEXT:    # implicit-def: $sx41
; CHECK-NEXT:    or %s41, 0, %s42
; CHECK-NEXT:    sll %s41, %s41, 32
; CHECK-NEXT:    or %s37, %s37, %s41
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s36)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s40, %s40, (32)0
; CHECK-NEXT:    # kill: def $sw40 killed $sw40 killed $sx40
; CHECK-NEXT:    adds.w.zx %s41, %s40, (0)1
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s36), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s39, %v1(%s39)
; CHECK-NEXT:    srl %s40, %s39, 32
; CHECK-NEXT:    or %s41, 0, %s40
; CHECK-NEXT:    # implicit-def: $sx40
; CHECK-NEXT:    or %s40, 0, %s41
; CHECK-NEXT:    sll %s40, %s40, 32
; CHECK-NEXT:    or %s37, %s37, %s40
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s35)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s39, %s39, (32)0
; CHECK-NEXT:    # kill: def $sw39 killed $sw39 killed $sx39
; CHECK-NEXT:    adds.w.zx %s40, %s39, (0)1
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s35), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)0
; CHECK-NEXT:    lvs %s38, %v1(%s38)
; CHECK-NEXT:    srl %s39, %s38, 32
; CHECK-NEXT:    or %s40, 0, %s39
; CHECK-NEXT:    # implicit-def: $sx39
; CHECK-NEXT:    or %s39, 0, %s40
; CHECK-NEXT:    sll %s39, %s39, 32
; CHECK-NEXT:    or %s37, %s37, %s39
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    lvs %s37, %v0(%s34)
; CHECK-NEXT:    and %s37, %s37, (32)1
; CHECK-NEXT:    and %s38, %s38, (32)0
; CHECK-NEXT:    # kill: def $sw38 killed $sw38 killed $sx38
; CHECK-NEXT:    adds.w.zx %s39, %s38, (0)1
; CHECK-NEXT:    # implicit-def: $sx38
; CHECK-NEXT:    or %s38, 0, %s39
; CHECK-NEXT:    or %s37, %s37, %s38
; CHECK-NEXT:    lsv %v0(%s34), %s37
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s7, %v0(%s7)
; CHECK-NEXT:    and %s37, %s7, (32)0
; CHECK-NEXT:    # kill: def $sw37 killed $sw37 killed $sx37
; CHECK-NEXT:    adds.w.zx %s38, %s37, (0)1
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    srl %s7, %s7, 32
; CHECK-NEXT:    or %s38, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s38
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s7, %s2, %s7
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s0)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s0), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s36, %v0(%s36)
; CHECK-NEXT:    srl %s37, %s36, 32
; CHECK-NEXT:    or %s38, 0, %s37
; CHECK-NEXT:    # implicit-def: $sx37
; CHECK-NEXT:    or %s37, 0, %s38
; CHECK-NEXT:    sll %s37, %s37, 32
; CHECK-NEXT:    or %s7, %s7, %s37
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s4)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s36, %s36, (32)0
; CHECK-NEXT:    # kill: def $sw36 killed $sw36 killed $sx36
; CHECK-NEXT:    adds.w.zx %s37, %s36, (0)1
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s4), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s35, %v0(%s35)
; CHECK-NEXT:    srl %s36, %s35, 32
; CHECK-NEXT:    or %s37, 0, %s36
; CHECK-NEXT:    # implicit-def: $sx36
; CHECK-NEXT:    or %s36, 0, %s37
; CHECK-NEXT:    sll %s36, %s36, 32
; CHECK-NEXT:    or %s7, %s7, %s36
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s5)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s35, %s35, (32)0
; CHECK-NEXT:    # kill: def $sw35 killed $sw35 killed $sx35
; CHECK-NEXT:    adds.w.zx %s36, %s35, (0)1
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s5), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)0
; CHECK-NEXT:    lvs %s34, %v0(%s34)
; CHECK-NEXT:    srl %s35, %s34, 32
; CHECK-NEXT:    or %s36, 0, %s35
; CHECK-NEXT:    # implicit-def: $sx35
; CHECK-NEXT:    or %s35, 0, %s36
; CHECK-NEXT:    sll %s35, %s35, 32
; CHECK-NEXT:    or %s7, %s7, %s35
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    lvs %s7, %v1(%s6)
; CHECK-NEXT:    and %s7, %s7, (32)1
; CHECK-NEXT:    and %s34, %s34, (32)0
; CHECK-NEXT:    # kill: def $sw34 killed $sw34 killed $sx34
; CHECK-NEXT:    adds.w.zx %s35, %s34, (0)1
; CHECK-NEXT:    # implicit-def: $sx34
; CHECK-NEXT:    or %s34, 0, %s35
; CHECK-NEXT:    or %s7, %s7, %s34
; CHECK-NEXT:    lsv %v1(%s6), %s7
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s5, %v1(%s5)
; CHECK-NEXT:    and %s7, %s5, (32)0
; CHECK-NEXT:    # kill: def $sw7 killed $sw7 killed $sx7
; CHECK-NEXT:    adds.w.zx %s34, %s7, (0)1
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    srl %s5, %s5, 32
; CHECK-NEXT:    or %s34, 0, %s5
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s34
; CHECK-NEXT:    sll %s5, %s5, 32
; CHECK-NEXT:    or %s5, %s2, %s5
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s0)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s0), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)0
; CHECK-NEXT:    lvs %s6, %v1(%s6)
; CHECK-NEXT:    srl %s7, %s6, 32
; CHECK-NEXT:    or %s34, 0, %s7
; CHECK-NEXT:    # implicit-def: $sx7
; CHECK-NEXT:    or %s7, 0, %s34
; CHECK-NEXT:    sll %s7, %s7, 32
; CHECK-NEXT:    or %s5, %s5, %s7
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    lvs %s5, %v0(%s4)
; CHECK-NEXT:    and %s5, %s5, (32)1
; CHECK-NEXT:    and %s6, %s6, (32)0
; CHECK-NEXT:    # kill: def $sw6 killed $sw6 killed $sx6
; CHECK-NEXT:    adds.w.zx %s7, %s6, (0)1
; CHECK-NEXT:    # implicit-def: $sx6
; CHECK-NEXT:    or %s6, 0, %s7
; CHECK-NEXT:    or %s5, %s5, %s6
; CHECK-NEXT:    lsv %v0(%s4), %s5
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s4, %v0(%s4)
; CHECK-NEXT:    and %s5, %s4, (32)0
; CHECK-NEXT:    # kill: def $sw5 killed $sw5 killed $sx5
; CHECK-NEXT:    adds.w.zx %s6, %s5, (0)1
; CHECK-NEXT:    # implicit-def: $sx5
; CHECK-NEXT:    or %s5, 0, %s6
; CHECK-NEXT:    srl %s4, %s4, 32
; CHECK-NEXT:    or %s6, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s6
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s4, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v1
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)1
; CHECK-NEXT:    or %s4, %s4, %s5
; CHECK-NEXT:    lsv %v1(%s0), %s4
; CHECK-NEXT:    vshf %v3, %v1, %v1, 0
; CHECK-NEXT:    vshf %v2, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v1, %v1, %v0, %vm2
; CHECK-NEXT:    lvs %s4, %v1(%s0)
; CHECK-NEXT:    and %s4, %s4, (32)0
; CHECK-NEXT:    or %s5, 0, %s4
; CHECK-NEXT:    # implicit-def: $sx4
; CHECK-NEXT:    or %s4, 0, %s5
; CHECK-NEXT:    sll %s4, %s4, 32
; CHECK-NEXT:    or %s2, %s2, %s4
; CHECK-NEXT:    # implicit-def: $v0
; CHECK-NEXT:    lsv %v0(%s0), %s2
; CHECK-NEXT:    vshf %v2, %v1, %v1, 0
; CHECK-NEXT:    vshf %v3, %v0, %v0, 0
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm1, %v2
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v3, (0)1, %v0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vcmpu.w %v2, %v2, %v3
; CHECK-NEXT:    vfmk.w.gt %vm4, %v2
; CHECK-NEXT:    # implicit-def: $vmp1
; CHECK-NEXT:    andm %vm3, %vm0, %vm4
; CHECK-NEXT:    andm %vm2, %vm0, %vm1
; CHECK-NEXT:    vmrg.w %v0, %v0, %v1, %vm2
; CHECK-NEXT:    lvs %s0, %v0(%s0)
; CHECK-NEXT:    srl %s0, %s0, 32
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    # implicit-def: $sx2
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    cmpu.w %s1, %s0, %s3
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s3
; CHECK-NEXT:    cmov.w.gt %s0, %s2, %s1
; CHECK-NEXT:    or %s1, 0, %s0
; CHECK-NEXT:    # implicit-def: $sx0
; CHECK-NEXT:    or %s0, 0, %s1
; CHECK-NEXT:    ld %s33, 2008(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s32, 2000(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s31, 1992(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s30, 1984(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s29, 1976(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s28, 1968(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s27, 1960(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s26, 1952(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s25, 1944(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s24, 1936(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s23, 1928(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s22, 1920(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s21, 1912(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s20, 1904(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s19, 1896(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s18, 1888(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s10, 8(, %s11)
; CHECK-NEXT:    ld %s9, (, %s11)
; CHECK-NEXT:    b.l.t (, %s10)
  %r = call i32 @llvm.vp.reduce.umax.v512i32(i32 %s, <512 x i32> %v, <512 x i1> %m, i32 %n)
  ret i32 %r
}

declare float @llvm.vp.reduce.fadd.v512f32(float, <512 x float>, <512 x i1>, i32)
declare float @llvm.vp.reduce.fmul.v512f32(float, <512 x float>, <512 x i1>, i32)
declare float @llvm.vp.reduce.fmin.v512f32(float, <512 x float>, <512 x i1>, i32)
declare float @llvm.vp.reduce.fmax.v512f32(float, <512 x float>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.add.v512i32(i32, <512 x i32>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.mul.v512i32(i32, <512 x i32>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.and.v512i32(i32, <512 x i32>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.xor.v512i32(i32, <512 x i32>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.or.v512i32(i32, <512 x i32>, <512 x i1>, i32)
declare i32 @llvm.vp.reduce.smax.v512i32(i32, <512 x i32> %v, <512 x i1> %m, i32 %n)
declare i32 @llvm.vp.reduce.smin.v512i32(i32, <512 x i32> %v, <512 x i1> %m, i32 %n)
declare i32 @llvm.vp.reduce.umax.v512i32(i32, <512 x i32> %v, <512 x i1> %m, i32 %n)
declare i32 @llvm.vp.reduce.umin.v512i32(i32, <512 x i32> %v, <512 x i1> %m, i32 %n)
