; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown --ve-fast-mem=0 | FileCheck %s

;; regular

; Function Attrs: nounwind
define fastcc void @vec_scatter_v128f64(<128 x double*> %P, <128 x double> %D,<128 x i1> %M) {
; CHECK-LABEL: vec_scatter_v128f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vsc %v1, %v0, 0, 0, %vm1
; CHECK-NEXT:    b.l.t (, %s10)
  call void @llvm.masked.scatter.v128f64.v128p0f64(<128 x double> %D, <128 x double*> %P, i32 16, <128 x i1> %M)
  ret void
}

; Function Attrs: nounwind
define fastcc void @vec_scatter_v256f64(<256 x double*> %P, <256 x double> %D, <256 x i1> %M) {
; CHECK-LABEL: vec_scatter_v256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vsc %v1, %v0, 0, 0, %vm1
; CHECK-NEXT:    b.l.t (, %s10)
  call void @llvm.masked.scatter.v256f64.v256p0f64(<256 x double> %D, <256 x double*> %P, i32 16, <256 x i1> %M)
  ret void
}

;;; overpacked

; Function Attrs: nounwind
define fastcc void @vec_scatter_v512f64(<512 x double*> %P, <512 x double> %D, <512 x i1> %M) {
; CHECK-LABEL: vec_scatter_v512f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vsc %v2, %v0, 0, 0, %vm2
; CHECK-NEXT:    vsc %v3, %v1, 0, 0, %vm3
; CHECK-NEXT:    b.l.t (, %s10)
  call void @llvm.masked.scatter.v512f64.v512p0f64(<512 x double> %D, <512 x double*> %P, i32 16, <512 x i1> %M)
  ret void
}

;;; packed

; Function Attrs: nounwind
define fastcc void @vec_scatter_v512f32(<512 x float*> %P, <512 x float> %D, <512 x i1> %M) {
; CHECK-LABEL: vec_scatter_v512f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vscu %v2, %v0, 0, 0, %vm2
; CHECK-NEXT:    vshf %v0, %v2, %v2, 4
; CHECK-NEXT:    vscu %v0, %v1, 0, 0, %vm3
; CHECK-NEXT:    b.l.t (, %s10)
  call void @llvm.masked.scatter.v512f32.v512p0f32(<512 x float> %D, <512 x float*> %P, i32 16, <512 x i1> %M)
  ret void
}

declare void @llvm.masked.scatter.v512f32.v512p0f32(<512 x float>,  <512 x float*>  %0, i32 immarg %1, <512 x i1> %2)
declare void @llvm.masked.scatter.v512f64.v512p0f64(<512 x double>, <512 x double*> %0, i32 immarg %1, <512 x i1> %2)
declare void @llvm.masked.scatter.v256f64.v256p0f64(<256 x double>, <256 x double*> %0, i32 immarg %1, <256 x i1> %2)
declare void @llvm.masked.scatter.v128f64.v128p0f64(<128 x double>, <128 x double*> %0, i32 immarg %1, <128 x i1> %2)
