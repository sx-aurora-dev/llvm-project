; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown | FileCheck %s

;; 256 elements
define fastcc <256 x double> @vec_sitofp_v256f64_v256double(<256 x i64> %x) {
; CHECK-LABEL: vec_sitofp_v256f64_v256double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vcvt.d.l %v0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r = sitofp <256 x i64> %x to <256 x double>
  ret <256 x double> %r
}

define fastcc <256 x double> @vec_uitofp_v256f64_v256double(<256 x i64> %x) {
; CHECK-LABEL: vec_uitofp_v256f64_v256double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    or %s1, 32, (0)1
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vsrl %v1, %v0, %s1
; CHECK-NEXT:    lea.sl %s1, 1160773632
; CHECK-NEXT:    vor %v1, %s1, %v1
; CHECK-NEXT:    lea %s1, 1048576
; CHECK-NEXT:    lea.sl %s1, 1160773632(, %s1)
; CHECK-NEXT:    vbrd %v2, %s1
; CHECK-NEXT:    vfsub.d %v1, %v1, %v2
; CHECK-NEXT:    lea %s1, -1
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    vand %v0, %s1, %v0
; CHECK-NEXT:    lea.sl %s1, 1127219200
; CHECK-NEXT:    vor %v0, %s1, %v0
; CHECK-NEXT:    vfadd.d %v0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = uitofp <256 x i64> %x to <256 x double>
  ret <256 x double> %r
}

define fastcc <256 x float> @vec_sitofp_v256f32_v256float(<256 x i32> %x) {
; CHECK-LABEL: vec_sitofp_v256f32_v256float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vcvt.s.w %v0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r = sitofp <256 x i32> %x to <256 x float>
  ret <256 x float> %r
}

define fastcc <256 x float> @vec_uitofp_v256f32_v256float(<256 x i32> %x) {
; CHECK-LABEL: vec_uitofp_v256f32_v256float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.w.zx %v0, 0, %v0, %vm0
; CHECK-NEXT:    or %s1, 32, (0)1
; CHECK-NEXT:    vsrl %v1, %v0, %s1
; CHECK-NEXT:    vcvt.d.l %v1, %v1
; CHECK-NEXT:    vcvt.s.d %v1, %v1
; CHECK-NEXT:    lea.sl %s1, 1333788672
; CHECK-NEXT:    pvfmul.up %v1, %s1, %v1
; CHECK-NEXT:    lea %s1, -1
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    vand %v0, %s1, %v0
; CHECK-NEXT:    vcvt.d.l %v0, %v0
; CHECK-NEXT:    vcvt.s.d %v0, %v0
; CHECK-NEXT:    pvfadd.up %v0, %v1, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r = uitofp <256 x i32> %x to <256 x float>
  ret <256 x float> %r
}

;; 512 elements
define fastcc <512 x double> @vec_sitofp_v512f64_v512double(<512 x i64> %x) {
; CHECK-LABEL: vec_sitofp_v512f64_v512double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vcvt.d.l %v1, %v1
; CHECK-NEXT:    vcvt.d.l %v0, %v0
; CHECK-NEXT:    # kill: def $v0 killed $v0 def $vp0 killed $v1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = sitofp <512 x i64> %x to <512 x double>
  ret <512 x double> %r
}

define fastcc <512 x double> @vec_uitofp_v512f64_v512double(<512 x i64> %x) {
; CHECK-LABEL: vec_uitofp_v512f64_v512double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    or %s1, 32, (0)1
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vsrl %v2, %v0, %s1
; CHECK-NEXT:    lea.sl %s2, 1160773632
; CHECK-NEXT:    vor %v2, %s2, %v2
; CHECK-NEXT:    vsrl %v4, %v1, %s1
; CHECK-NEXT:    vor %v3, %s2, %v4
; CHECK-NEXT:    lea %s1, 1048576
; CHECK-NEXT:    lea.sl %s1, 1160773632(, %s1)
; CHECK-NEXT:    vbrd %v4, %s1
; CHECK-NEXT:    vfsub.d %v5, %v3, %v4
; CHECK-NEXT:    lea %s1, -1
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    vand %v0, %s1, %v0
; CHECK-NEXT:    lea.sl %s2, 1127219200
; CHECK-NEXT:    vor %v6, %s2, %v0
; CHECK-NEXT:    vand %v0, %s1, %v1
; CHECK-NEXT:    vor %v7, %s2, %v0
; CHECK-NEXT:    vfadd.d %v1, %v7, %v5
; CHECK-NEXT:    vfsub.d %v0, %v2, %v4
; CHECK-NEXT:    vfadd.d %v0, %v6, %v0
; CHECK-NEXT:    # kill: def $v0 killed $v0 def $vp0 killed $v1
; CHECK-NEXT:    b.l.t (, %s10)
  %r = uitofp <512 x i64> %x to <512 x double>
  ret <512 x double> %r
}

define fastcc <512 x float> @vec_sitofp_v512f32_v512float(<512 x i32> %x) {
; CHECK-LABEL: vec_sitofp_v512f32_v512float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    pvcvt.s.w %v0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r = sitofp <512 x i32> %x to <512 x float>
  ret <512 x float> %r
}

define fastcc <512 x float> @vec_uitofp_v512f32_v512float(<512 x i32> %x) {
; CHECK-LABEL: vec_uitofp_v512f32_v512float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.w.zx %v1, 0, %v0, %vm0
; CHECK-NEXT:    or %s1, 32, (0)1
; CHECK-NEXT:    vsrl %v2, %v1, %s1
; CHECK-NEXT:    vcvt.d.l %v2, %v2
; CHECK-NEXT:    vcvt.s.d %v2, %v2
; CHECK-NEXT:    vshf %v0, %v0, %v0, 0
; CHECK-NEXT:    vadds.w.zx %v0, 0, %v0, %vm0
; CHECK-NEXT:    vsrl %v3, %v0, %s1
; CHECK-NEXT:    vcvt.d.l %v3, %v3
; CHECK-NEXT:    vcvt.s.d %v3, %v3
; CHECK-NEXT:    vshf %v2, %v2, %v3, 8
; CHECK-NEXT:    lea.sl %s1, 1333788672
; CHECK-NEXT:    and %s2, %s1, (32)1
; CHECK-NEXT:    srl %s1, %s1, 32
; CHECK-NEXT:    or %s1, %s1, %s2
; CHECK-NEXT:    pvfmul %v2, %s1, %v2
; CHECK-NEXT:    lea %s1, -1
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    vand %v1, %s1, %v1
; CHECK-NEXT:    vcvt.d.l %v1, %v1
; CHECK-NEXT:    vcvt.s.d %v1, %v1
; CHECK-NEXT:    vand %v0, %s1, %v0
; CHECK-NEXT:    vcvt.d.l %v0, %v0
; CHECK-NEXT:    vcvt.s.d %v0, %v0
; CHECK-NEXT:    vshf %v0, %v1, %v0, 8
; CHECK-NEXT:    pvfadd %v0, %v2, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r = uitofp <512 x i32> %x to <512 x float>
  ret <512 x float> %r
}
