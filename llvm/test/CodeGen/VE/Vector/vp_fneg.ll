; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -march=ve -mattr=+vpu | FileCheck %s

define fastcc <512 x float> @test_vp_fneg_512f32(<512 x float> %i0, <512 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fneg_512f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.w.sx %s0, 1, %s0
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    srl %s0, %s0, 1
; CHECK-NEXT:    or %s1, 1, (32)1
; CHECK-NEXT:    sll %s1, %s1, 31
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    pvxor %v0, %s1, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <512 x float> @llvm.vp.fneg.v512f32(<512 x float> %i0, <512 x i1> %m, i32 %n)
  ret <512 x float> %r0
}

define fastcc <256 x float> @test_vp_fneg_256f32(<256 x float> %i0, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fneg_256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vxor %v0, (1)1, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <256 x float> @llvm.vp.fneg.v256f32(<256 x float> %i0, <256 x i1> %m, i32 %n)
  ret <256 x float> %r0
}

define fastcc <256 x double> @test_vp_fneg_256f64(<256 x double> %i0, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fneg_256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vxor %v0, (1)1, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <256 x double> @llvm.vp.fneg.v256f64(<256 x double> %i0, <256 x i1> %m, i32 %n)
  ret <256 x double> %r0
}

declare <256 x float> @llvm.vp.fneg.v256f32(<256 x float>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fneg.v256f64(<256 x double>, <256 x i1>, i32)
declare <512 x float> @llvm.vp.fneg.v512f32(<512 x float>, <512 x i1>, i32)
