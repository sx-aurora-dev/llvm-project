; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve-unknown-unknown -mattr=+vpu | FileCheck %s

; ISA-compatible vector broadcasts
define fastcc <256 x i64> @brd_v256i64(i64 %s) {
; CHECK-LABEL: brd_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x i64> undef, i64 %s, i32 0
  %ret = shufflevector <256 x i64> %val, <256 x i64> undef, <256 x i32> zeroinitializer
  ret <256 x i64> %ret
}

define fastcc <256 x i64> @brdi_v256i64() {
; CHECK-LABEL: brdi_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 1
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x i64> undef, i64 1, i32 0
  %ret = shufflevector <256 x i64> %val, <256 x i64> undef, <256 x i32> zeroinitializer
  ret <256 x i64> %ret
}

define fastcc <256 x double> @brd_v256f64(double %s) {
; CHECK-LABEL: brd_v256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x double> undef, double %s, i32 0
  %ret = shufflevector <256 x double> %val, <256 x double> undef, <256 x i32> zeroinitializer
  ret <256 x double> %ret
}

define fastcc <256 x double> @brdi_v256f64() {
; CHECK-LABEL: brdi_v256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x double> undef, double 0.e+00, i32 0
  %ret = shufflevector <256 x double> %val, <256 x double> undef, <256 x i32> zeroinitializer
  ret <256 x double> %ret
}

define fastcc <256 x i32> @brd_v256i32(i32 %s) {
; CHECK-LABEL: brd_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x i32> undef, i32 %s, i32 0
  %ret = shufflevector <256 x i32> %val, <256 x i32> undef, <256 x i32> zeroinitializer
  ret <256 x i32> %ret
}

define fastcc <256 x i32> @brdi_v256i32(i32 %s) {
; CHECK-LABEL: brdi_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 13
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x i32> undef, i32 13, i32 0
  %ret = shufflevector <256 x i32> %val, <256 x i32> undef, <256 x i32> zeroinitializer
  ret <256 x i32> %ret
}

define fastcc <256 x float> @brd_v256f32(float %s) {
; CHECK-LABEL: brd_v256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x float> undef, float %s, i32 0
  %ret = shufflevector <256 x float> %val, <256 x float> undef, <256 x i32> zeroinitializer
  ret <256 x float> %ret
}

define fastcc <256 x float> @brdi_v256f32(float %s) {
; CHECK-LABEL: brdi_v256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x float> undef, float 0.e+00, i32 0
  %ret = shufflevector <256 x float> %val, <256 x float> undef, <256 x i32> zeroinitializer
  ret <256 x float> %ret
}


; Shorter vectors, we expect these to be widened (for now).
define fastcc <128 x i64> @brd_v128i64(i64 %s) {
; CHECK-LABEL: brd_v128i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x i64> undef, i64 %s, i32 0
  %ret = shufflevector <128 x i64> %val, <128 x i64> undef, <128 x i32> zeroinitializer
  ret <128 x i64> %ret
}

define fastcc <128 x double> @brd_v128f64(double %s) {
; CHECK-LABEL: brd_v128f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x double> undef, double %s, i32 0
  %ret = shufflevector <128 x double> %val, <128 x double> undef, <128 x i32> zeroinitializer
  ret <128 x double> %ret
}

define fastcc <128 x i32> @brd_v128i32(i32 %s) {
; CHECK-LABEL: brd_v128i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x i32> undef, i32 %s, i32 0
  %ret = shufflevector <128 x i32> %val, <128 x i32> undef, <128 x i32> zeroinitializer
  ret <128 x i32> %ret
}

define fastcc <128 x i32> @brdi_v128i32(i32 %s) {
; CHECK-LABEL: brdi_v128i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 13
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x i32> undef, i32 13, i32 0
  %ret = shufflevector <128 x i32> %val, <128 x i32> undef, <128 x i32> zeroinitializer
  ret <128 x i32> %ret
}

define fastcc <128 x float> @brd_v128f32(float %s) {
; CHECK-LABEL: brd_v128f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x float> undef, float %s, i32 0
  %ret = shufflevector <128 x float> %val, <128 x float> undef, <128 x i32> zeroinitializer
  ret <128 x float> %ret
}

define fastcc <128 x float> @brdi_v128f32(float %s) {
; CHECK-LABEL: brdi_v128f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vbrd %v0, 0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x float> undef, float 0.e+00, i32 0
  %ret = shufflevector <128 x float> %val, <128 x float> undef, <128 x i32> zeroinitializer
  ret <128 x float> %ret
}

; Vectors with small element types and valid element count, we expect those to be promoted.
define fastcc <256 x i16> @brd_v256i16(i16 %s) {
; CHECK-LABEL: brd_v256i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <256 x i16> undef, i16 %s, i32 0
  %ret = shufflevector <256 x i16> %val, <256 x i16> undef, <256 x i32> zeroinitializer
  ret <256 x i16> %ret
}

; Vectors with small element types and low element count, these are scalarized for now.
; FIXME Promote + Widen
define fastcc <128 x i16> @brd_v128i16(i16 %s) {
; CHECK-LABEL: brd_v128i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 128
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vbrd %v0, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %val = insertelement <128 x i16> undef, i16 %s, i32 0
  %ret = shufflevector <128 x i16> %val, <128 x i16> undef, <128 x i32> zeroinitializer
  ret <128 x i16> %ret
}
