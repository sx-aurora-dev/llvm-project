; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 --march=ve -mattr=+vpu %s -o=/dev/stdout | FileCheck %s

define fastcc void @test_vp_harness(<256 x i64>* %Out, <256 x i64> %i0) {
; CHECK-LABEL: test_vp_harness:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vst %v0, 8, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  store <256 x i64> %i0, <256 x i64>* %Out
  ret void
}

define fastcc void @test_vp_fadd_fsub_fmul_fneg_fma(<256 x double>* %Out, <256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fadd_fsub_fmul_fneg_fma:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v1, (0)1, %v0
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfadd.d %v0, %v1, %v2
; CHECK-NEXT:    vfsub.d %v3, %v1, %v2
; CHECK-NEXT:    vfmul.d %v0, %v0, %v3
; CHECK-NEXT:    vfmad.d %v0, %v0, %v1, %v2
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vst %v0, 8, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <256 x double> @llvm.vp.fadd.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
  %r1 = call <256 x double> @llvm.vp.fsub.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
  %r2 = call <256 x double> @llvm.vp.fmul.v256f64(<256 x double> %r0, <256 x double> %r1, <256 x i1> %m, i32 %n)
  ; %r3 = call <256 x double> @llvm.vp.fneg.v256f64(<256 x double> %r2, <256 x i1> %m, i32 %n)
  %r4 = call <256 x double> @llvm.vp.fma.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x double> %r2, <256 x i1> %m, i32 %n)
  store <256 x double> %r4, <256 x double>* %Out
  ret void
}

define fastcc void @test_vp_fdiv(<256 x double>* %Out, <256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fdiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfdiv.d %v0, %v0, %v1
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    # kill: def $sw1 killed $sw1 killed $sx1
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vst %v0, 8, %s0
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <256 x double> @llvm.vp.fdiv.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
  store <256 x double> %r0, <256 x double>* %Out
  ret void
}

define fastcc void @test_vp_fmin_fmax(<256 x double>* %O1, <256 x double>* %O2, <256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_fmin_fmax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    adds.l %s11, -16, %s11
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB3_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    st %s2, 8(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    lea %s16, 256
; CHECK-NEXT:    lvl %s16
; CHECK-NEXT:    vor %v2, (0)1, %v1
; CHECK-NEXT:    or %s2, 0, %s0
; CHECK-NEXT:    ld %s0, 8(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vfmin.d %v1, %v0, %v2
; CHECK-NEXT:    vfmax.d %v0, %v0, %v2
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    # kill: def $sw0 killed $sw0 killed $sx0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vst %v1, 8, %s2
; CHECK-NEXT:    vst %v0, 8, %s1
; CHECK-NEXT:    adds.l %s11, 16, %s11
; CHECK-NEXT:    b.l.t (, %s10)
  %r0 = call <256 x double> @llvm.vp.minnum.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
  %r1 = call <256 x double> @llvm.vp.maxnum.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
  store <256 x double> %r0, <256 x double>* %O1
  store <256 x double> %r1, <256 x double>* %O2
  ret void
}

; define fastcc void @test_vp_frem(<256 x double>* %Out, <256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n) {
;   %r0 = call <256 x double> @llvm.vp.frem.v256f64(<256 x double> %f0, <256 x double> %f1, <256 x i1> %m, i32 %n)
;   store <256 x double> %r0, <256 x double>* %Out
;   ret void
; }

; fp arithmetic
declare <256 x double> @llvm.vp.fadd.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fsub.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fmul.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fdiv.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fma.v256f64(<256 x double>, <256 x double>, <256 x double>, <256 x i1>, i32)
; TODO
; declare <256 x double> @llvm.vp.frem.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
; declare <256 x double> @llvm.vp.fneg.v256f64(<256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.minnum.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.maxnum.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
